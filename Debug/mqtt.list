
mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005310  08005310  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005318  08005318  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005318  08005318  00015318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000428  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a0  200004a0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009eab  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d10  00000000  00000000  00029f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  0002bc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000710  00000000  00000000  0002c440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021006  00000000  00000000  0002cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b0f8  00000000  00000000  0004db56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c318e  00000000  00000000  00058c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011bddc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a14  00000000  00000000  0011be2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d00 	.word	0x08004d00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004d00 	.word	0x08004d00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a1f      	ldr	r2, [pc, #124]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_GPIO_Init+0xa0>)
 80005f6:	f000 fec1 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0xa0>)
 8000614:	f000 fd16 	bl	8001044 <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020800 	.word	0x40020800

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 facf 	bl	8000bd0 <HAL_Init>

  /* USER CODE BEGIN Init */
	initialise_monitor_handles();
 8000632:	f003 fa31 	bl	8003a98 <initialise_monitor_handles>
	HAL_UART_Receive_IT(&huart1,usart1_rxone,1);			//Откройте прерывание USART1 и получите сообщение о подписке
 8000636:	2201      	movs	r2, #1
 8000638:	490d      	ldr	r1, [pc, #52]	; (8000670 <main+0x48>)
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <main+0x4c>)
 800063c:	f001 fbef 	bl	8001e1e <HAL_UART_Receive_IT>
	ES8266_MQTT_Init();
 8000640:	f000 f8f4 	bl	800082c <ES8266_MQTT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f81a 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ff9c 	bl	8000584 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800064c:	f000 fa1c 	bl	8000a88 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint16_t Counter_RUNInfo_Send = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Counter_RUNInfo_Send++>0)
 8000654:	88fb      	ldrh	r3, [r7, #6]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	80fa      	strh	r2, [r7, #6]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d004      	beq.n	8000668 <main+0x40>
	  		{
	  			Counter_RUNInfo_Send = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	80fb      	strh	r3, [r7, #6]
	  			printf("Программа запущена！\r\n");
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <main+0x50>)
 8000664:	f003 fcd0 	bl	8004008 <puts>
	  		}
	  		HAL_Delay(LOOPTIME);
 8000668:	201e      	movs	r0, #30
 800066a:	f000 fb23 	bl	8000cb4 <HAL_Delay>
	  if(Counter_RUNInfo_Send++>0)
 800066e:	e7f1      	b.n	8000654 <main+0x2c>
 8000670:	200003e0 	.word	0x200003e0
 8000674:	20000098 	.word	0x20000098
 8000678:	08004d18 	.word	0x08004d18

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fbb1 	bl	8003df2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006ec:	2319      	movs	r3, #25
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fe54 	bl	80013b0 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800070e:	f000 f911 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2105      	movs	r1, #5
 8000730:	4618      	mov	r0, r3
 8000732:	f001 f8b5 	bl	80018a0 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800073c:	f000 f8fa 	bl	8000934 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	; 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
/******************************  USART1 Код прерывания приема  *****************************/

// ES8266 Последовательный порт привода для приема функции обработки прерываний
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)	//Определите, какой последовательный порт вызвал прерывание
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <HAL_UART_RxCpltCallback+0x40>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d111      	bne.n	8000786 <HAL_UART_RxCpltCallback+0x36>
	{
		//Поместите полученные данные в принимающий массив usart1 receiving
		usart1_rxbuf[usart1_rxcounter] = usart1_rxone[0];
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_UART_RxCpltCallback+0x44>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <HAL_UART_RxCpltCallback+0x48>)
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <HAL_UART_RxCpltCallback+0x4c>)
 800076e:	5499      	strb	r1, [r3, r2]
		usart1_rxcounter++;	//Полученное количество +1
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_UART_RxCpltCallback+0x44>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_UART_RxCpltCallback+0x44>)
 800077a:	701a      	strb	r2, [r3, #0]

		//Повторно включите последовательный порт 1 для приема прерывания
		HAL_UART_Receive_IT(&huart1,usart1_rxone,1);
 800077c:	2201      	movs	r2, #1
 800077e:	4906      	ldr	r1, [pc, #24]	; (8000798 <HAL_UART_RxCpltCallback+0x48>)
 8000780:	4807      	ldr	r0, [pc, #28]	; (80007a0 <HAL_UART_RxCpltCallback+0x50>)
 8000782:	f001 fb4c 	bl	8001e1e <HAL_UART_Receive_IT>
	}
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40011000 	.word	0x40011000
 8000794:	200003e1 	.word	0x200003e1
 8000798:	200003e0 	.word	0x200003e0
 800079c:	200001e0 	.word	0x200001e0
 80007a0:	20000098 	.word	0x20000098

080007a4 <Enter_ErrorMode>:

/******************************  Введите код режима ошибки  *****************************/

//Войдите в режим ошибки и дождитесь ручного перезапуска
void Enter_ErrorMode(uint8_t mode)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		switch(mode){
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d821      	bhi.n	80007f8 <Enter_ErrorMode+0x54>
 80007b4:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <Enter_ErrorMode+0x18>)
 80007b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ba:	bf00      	nop
 80007bc:	080007d1 	.word	0x080007d1
 80007c0:	080007d9 	.word	0x080007d9
 80007c4:	080007e1 	.word	0x080007e1
 80007c8:	080007e9 	.word	0x080007e9
 80007cc:	080007f1 	.word	0x080007f1
			case 0:printf("ESP8266 Сбой инициализации！\r\n");break;
 80007d0:	480f      	ldr	r0, [pc, #60]	; (8000810 <Enter_ErrorMode+0x6c>)
 80007d2:	f003 fc19 	bl	8004008 <puts>
 80007d6:	e013      	b.n	8000800 <Enter_ErrorMode+0x5c>
			case 1:printf("ESP8266 Не удалось подключиться к точке доступа！\r\n");break;
 80007d8:	480e      	ldr	r0, [pc, #56]	; (8000814 <Enter_ErrorMode+0x70>)
 80007da:	f003 fc15 	bl	8004008 <puts>
 80007de:	e00f      	b.n	8000800 <Enter_ErrorMode+0x5c>
			case 2:printf("ESP8266 Не удалось подключиться к облачному серверу！\r\n");break;
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <Enter_ErrorMode+0x74>)
 80007e2:	f003 fc11 	bl	8004008 <puts>
 80007e6:	e00b      	b.n	8000800 <Enter_ErrorMode+0x5c>
			case 3:printf("ESP8266 Сбой входа в систему Cloud MQTT！\r\n");break;
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <Enter_ErrorMode+0x78>)
 80007ea:	f003 fc0d 	bl	8004008 <puts>
 80007ee:	e007      	b.n	8000800 <Enter_ErrorMode+0x5c>
			case 4:printf("ESP8266 Ошибка в теме подписки на Cloud MQTT не удалась！\r\n");break;
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <Enter_ErrorMode+0x7c>)
 80007f2:	f003 fc09 	bl	8004008 <puts>
 80007f6:	e003      	b.n	8000800 <Enter_ErrorMode+0x5c>
			default:printf("Ничего\r\n");break;
 80007f8:	480a      	ldr	r0, [pc, #40]	; (8000824 <Enter_ErrorMode+0x80>)
 80007fa:	f003 fc05 	bl	8004008 <puts>
 80007fe:	bf00      	nop
		}
		printf("Пожалуйста, перезапустите совет по разработке\r\n");
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <Enter_ErrorMode+0x84>)
 8000802:	f003 fc01 	bl	8004008 <puts>
		//HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
		HAL_Delay(200);
 8000806:	20c8      	movs	r0, #200	; 0xc8
 8000808:	f000 fa54 	bl	8000cb4 <HAL_Delay>
		switch(mode){
 800080c:	e7cf      	b.n	80007ae <Enter_ErrorMode+0xa>
 800080e:	bf00      	nop
 8000810:	08004d40 	.word	0x08004d40
 8000814:	08004d70 	.word	0x08004d70
 8000818:	08004dc8 	.word	0x08004dc8
 800081c:	08004e28 	.word	0x08004e28
 8000820:	08004e68 	.word	0x08004e68
 8000824:	08004ec4 	.word	0x08004ec4
 8000828:	08004ed4 	.word	0x08004ed4

0800082c <ES8266_MQTT_Init>:

/******************************  STM32 MQTT код  *****************************/

//Функция инициализации MQTT
void ES8266_MQTT_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	uint8_t status=0;
 8000832:	2300      	movs	r3, #0
 8000834:	71fb      	strb	r3, [r7, #7]

	//Инициализация
	if(ESP8266_Init())
 8000836:	f002 fb33 	bl	8002ea0 <ESP8266_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d006      	beq.n	800084e <ES8266_MQTT_Init+0x22>
	{
		printf("ESP8266 Успешно！\r\n");
 8000840:	482f      	ldr	r0, [pc, #188]	; (8000900 <ES8266_MQTT_Init+0xd4>)
 8000842:	f003 fbe1 	bl	8004008 <puts>
		status++;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	3301      	adds	r3, #1
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	e002      	b.n	8000854 <ES8266_MQTT_Init+0x28>
	}
	else Enter_ErrorMode(0);
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff ffa8 	bl	80007a4 <Enter_ErrorMode>

	//Подключение к точкам доступа
	if(status==1)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d110      	bne.n	800087c <ES8266_MQTT_Init+0x50>
	{
		if(ESP8266_ConnectAP(WIFI_NAME,WIFI_PASSWD))
 800085a:	492a      	ldr	r1, [pc, #168]	; (8000904 <ES8266_MQTT_Init+0xd8>)
 800085c:	482a      	ldr	r0, [pc, #168]	; (8000908 <ES8266_MQTT_Init+0xdc>)
 800085e:	f002 fb73 	bl	8002f48 <ESP8266_ConnectAP>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d006      	beq.n	8000876 <ES8266_MQTT_Init+0x4a>
		{
			printf("ESP8266 Успешно подключился к точке доступа！\r\n");
 8000868:	4828      	ldr	r0, [pc, #160]	; (800090c <ES8266_MQTT_Init+0xe0>)
 800086a:	f003 fbcd 	bl	8004008 <puts>
			status++;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	3301      	adds	r3, #1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	e002      	b.n	800087c <ES8266_MQTT_Init+0x50>
		}
		else Enter_ErrorMode(1);
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff ff94 	bl	80007a4 <Enter_ErrorMode>
	}

	//Подключение к облачному серверу интернета вещей
	if(status==2)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d112      	bne.n	80008a8 <ES8266_MQTT_Init+0x7c>
	{
		if(ESP8266_ConnectServer("TCP",MQTT_BROKERADDRESS,9994)!=0)
 8000882:	f242 720a 	movw	r2, #9994	; 0x270a
 8000886:	4922      	ldr	r1, [pc, #136]	; (8000910 <ES8266_MQTT_Init+0xe4>)
 8000888:	4822      	ldr	r0, [pc, #136]	; (8000914 <ES8266_MQTT_Init+0xe8>)
 800088a:	f002 fbe3 	bl	8003054 <ESP8266_ConnectServer>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d006      	beq.n	80008a2 <ES8266_MQTT_Init+0x76>
		{
			printf("ESP8266 Успешно подключено к облачному серверу！\r\n");
 8000894:	4820      	ldr	r0, [pc, #128]	; (8000918 <ES8266_MQTT_Init+0xec>)
 8000896:	f003 fbb7 	bl	8004008 <puts>
			status++;
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	3301      	adds	r3, #1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	e002      	b.n	80008a8 <ES8266_MQTT_Init+0x7c>
		}
		else Enter_ErrorMode(2);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f7ff ff7e 	bl	80007a4 <Enter_ErrorMode>
	}

	if(status==3)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d111      	bne.n	80008d2 <ES8266_MQTT_Init+0xa6>
	{
		if(MQTT_Connect(MQTT_CLIENTID, MQTT_USARNAME, MQTT_PASSWD) != 0)
 80008ae:	4a1b      	ldr	r2, [pc, #108]	; (800091c <ES8266_MQTT_Init+0xf0>)
 80008b0:	491b      	ldr	r1, [pc, #108]	; (8000920 <ES8266_MQTT_Init+0xf4>)
 80008b2:	481c      	ldr	r0, [pc, #112]	; (8000924 <ES8266_MQTT_Init+0xf8>)
 80008b4:	f002 fc4e 	bl	8003154 <MQTT_Connect>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d006      	beq.n	80008cc <ES8266_MQTT_Init+0xa0>
		{
			printf("ESP8266 Cloud MQTT успешно вошел в систему！\r\n");
 80008be:	481a      	ldr	r0, [pc, #104]	; (8000928 <ES8266_MQTT_Init+0xfc>)
 80008c0:	f003 fba2 	bl	8004008 <puts>
			status++;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	3301      	adds	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	e002      	b.n	80008d2 <ES8266_MQTT_Init+0xa6>
		}
		else Enter_ErrorMode(3);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f7ff ff69 	bl	80007a4 <Enter_ErrorMode>
	}

	//Подписаться на темы
	if(status==4)
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d10e      	bne.n	80008f6 <ES8266_MQTT_Init+0xca>
	{
		if(MQTT_SubscribeTopic(MQTT_SUBSCRIBE_TOPIC,0,1) != 0)
 80008d8:	2201      	movs	r2, #1
 80008da:	2100      	movs	r1, #0
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <ES8266_MQTT_Init+0x100>)
 80008de:	f002 fdcf 	bl	8003480 <MQTT_SubscribeTopic>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d003      	beq.n	80008f0 <ES8266_MQTT_Init+0xc4>
		{
			printf("ESP8266 Cloud MQTT успешно подписался на эту тему！\r\n");
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <ES8266_MQTT_Init+0x104>)
 80008ea:	f003 fb8d 	bl	8004008 <puts>
		}
		else Enter_ErrorMode(4);
	}
}
 80008ee:	e002      	b.n	80008f6 <ES8266_MQTT_Init+0xca>
		else Enter_ErrorMode(4);
 80008f0:	2004      	movs	r0, #4
 80008f2:	f7ff ff57 	bl	80007a4 <Enter_ErrorMode>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	08005120 	.word	0x08005120
 8000904:	08004f64 	.word	0x08004f64
 8000908:	08004f70 	.word	0x08004f70
 800090c:	08004f84 	.word	0x08004f84
 8000910:	08004fd4 	.word	0x08004fd4
 8000914:	08004fe8 	.word	0x08004fe8
 8000918:	08004fec 	.word	0x08004fec
 800091c:	08005044 	.word	0x08005044
 8000920:	08005054 	.word	0x08005054
 8000924:	08005064 	.word	0x08005064
 8000928:	0800513c 	.word	0x0800513c
 800092c:	080050b4 	.word	0x080050b4
 8000930:	080050d0 	.word	0x080050d0

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f94a 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <USART1_IRQHandler+0x10>)
 80009ea:	f001 fa49 	bl	8001e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000098 	.word	0x20000098

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f003 f8b2 	bl	8003b90 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20020000 	.word	0x20020000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000094 	.word	0x20000094
 8000a60:	200004a0 	.word	0x200004a0

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART1_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f001 f8ce 	bl	8001c60 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f7ff ff33 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000098 	.word	0x20000098
 8000ad8:	40011000 	.word	0x40011000

08000adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <HAL_UART_MspInit+0x94>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d134      	bne.n	8000b68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_UART_MspInit+0x9c>)
 8000b54:	f000 fa76 	bl	8001044 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	2025      	movs	r0, #37	; 0x25
 8000b5e:	f000 f9a8 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b62:	2025      	movs	r0, #37	; 0x25
 8000b64:	f000 f9c1 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b82:	490e      	ldr	r1, [pc, #56]	; (8000bbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b98:	4c0b      	ldr	r4, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba6:	f7ff ff5d 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f003 f8ed 	bl	8003d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fd3b 	bl	8000628 <main>
  bx  lr    
 8000bb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bc0:	08005320 	.word	0x08005320
  ldr r2, =_sbss
 8000bc4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bc8:	200004a0 	.word	0x200004a0

08000bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <HAL_Init+0x40>)
 8000bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_Init+0x40>)
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x40>)
 8000bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f94f 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fe9c 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023c00 	.word	0x40023c00

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f967 	bl	8000f06 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f000 f92f 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	200000dc 	.word	0x200000dc

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000dc 	.word	0x200000dc

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff29 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff3e 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff31 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff feb6 	bl	8000c9c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d008      	beq.n	8000f50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e052      	b.n	8000ff6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0216 	bic.w	r2, r2, #22
 8000f5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	695a      	ldr	r2, [r3, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d103      	bne.n	8000f80 <HAL_DMA_Abort+0x62>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d007      	beq.n	8000f90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0208 	bic.w	r2, r2, #8
 8000f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0201 	bic.w	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa0:	e013      	b.n	8000fca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fa2:	f7ff fe7b 	bl	8000c9c <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d90c      	bls.n	8000fca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2203      	movs	r2, #3
 8000fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e015      	b.n	8000ff6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e4      	bne.n	8000fa2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fdc:	223f      	movs	r2, #63	; 0x3f
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d004      	beq.n	800101c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e00c      	b.n	8001036 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2205      	movs	r2, #5
 8001020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0201 	bic.w	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e16b      	b.n	8001338 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 815a 	bne.w	8001332 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	2b02      	cmp	r3, #2
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80b4 	beq.w	8001332 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b60      	ldr	r3, [pc, #384]	; (8001350 <HAL_GPIO_Init+0x30c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a5f      	ldr	r2, [pc, #380]	; (8001350 <HAL_GPIO_Init+0x30c>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b5d      	ldr	r3, [pc, #372]	; (8001350 <HAL_GPIO_Init+0x30c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e6:	4a5b      	ldr	r2, [pc, #364]	; (8001354 <HAL_GPIO_Init+0x310>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a52      	ldr	r2, [pc, #328]	; (8001358 <HAL_GPIO_Init+0x314>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02b      	beq.n	800126a <HAL_GPIO_Init+0x226>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a51      	ldr	r2, [pc, #324]	; (800135c <HAL_GPIO_Init+0x318>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d025      	beq.n	8001266 <HAL_GPIO_Init+0x222>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a50      	ldr	r2, [pc, #320]	; (8001360 <HAL_GPIO_Init+0x31c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01f      	beq.n	8001262 <HAL_GPIO_Init+0x21e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4f      	ldr	r2, [pc, #316]	; (8001364 <HAL_GPIO_Init+0x320>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x21a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <HAL_GPIO_Init+0x324>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x216>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4d      	ldr	r2, [pc, #308]	; (800136c <HAL_GPIO_Init+0x328>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x212>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <HAL_GPIO_Init+0x32c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x20e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4b      	ldr	r2, [pc, #300]	; (8001374 <HAL_GPIO_Init+0x330>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x20a>
 800124a:	2307      	movs	r3, #7
 800124c:	e00e      	b.n	800126c <HAL_GPIO_Init+0x228>
 800124e:	2308      	movs	r3, #8
 8001250:	e00c      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001252:	2306      	movs	r3, #6
 8001254:	e00a      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001256:	2305      	movs	r3, #5
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x228>
 800125a:	2304      	movs	r3, #4
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x228>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x228>
 800126a:	2300      	movs	r3, #0
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800127c:	4935      	ldr	r1, [pc, #212]	; (8001354 <HAL_GPIO_Init+0x310>)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_GPIO_Init+0x334>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ae:	4a32      	ldr	r2, [pc, #200]	; (8001378 <HAL_GPIO_Init+0x334>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_GPIO_Init+0x334>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d8:	4a27      	ldr	r2, [pc, #156]	; (8001378 <HAL_GPIO_Init+0x334>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x334>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001302:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_GPIO_Init+0x334>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_GPIO_Init+0x334>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <HAL_GPIO_Init+0x334>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	f67f ae90 	bls.w	8001060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40013800 	.word	0x40013800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40021400 	.word	0x40021400
 8001370:	40021800 	.word	0x40021800
 8001374:	40021c00 	.word	0x40021c00
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001398:	e003      	b.n	80013a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	619a      	str	r2, [r3, #24]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e267      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d075      	beq.n	80014ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d00c      	beq.n	80013f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013da:	4b85      	ldr	r3, [pc, #532]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d112      	bne.n	800140c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e6:	4b82      	ldr	r3, [pc, #520]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013f2:	d10b      	bne.n	800140c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	4b7e      	ldr	r3, [pc, #504]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d05b      	beq.n	80014b8 <HAL_RCC_OscConfig+0x108>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d157      	bne.n	80014b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e242      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d106      	bne.n	8001424 <HAL_RCC_OscConfig+0x74>
 8001416:	4b76      	ldr	r3, [pc, #472]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a75      	ldr	r2, [pc, #468]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e01d      	b.n	8001460 <HAL_RCC_OscConfig+0xb0>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x98>
 800142e:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6f      	ldr	r2, [pc, #444]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a6c      	ldr	r2, [pc, #432]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0xb0>
 8001448:	4b69      	ldr	r3, [pc, #420]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a68      	ldr	r2, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800145a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fc18 	bl	8000c9c <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fc14 	bl	8000c9c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e207      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0xc0>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fc04 	bl	8000c9c <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fc00 	bl	8000c9c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1f3      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0xe8>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d063      	beq.n	800158e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c6:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d11c      	bne.n	8001518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014de:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x152>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e1c7      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4937      	ldr	r1, [pc, #220]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	e03a      	b.n	800158e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001520:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <HAL_RCC_OscConfig+0x244>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fbb9 	bl	8000c9c <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fbb5 	bl	8000c9c <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1a8      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4925      	ldr	r1, [pc, #148]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 800155c:	4313      	orrs	r3, r2
 800155e:	600b      	str	r3, [r1, #0]
 8001560:	e015      	b.n	800158e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_OscConfig+0x244>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fb98 	bl	8000c9c <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001570:	f7ff fb94 	bl	8000c9c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e187      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d036      	beq.n	8001608 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d016      	beq.n	80015d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_RCC_OscConfig+0x248>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fb78 	bl	8000c9c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fb74 	bl	8000c9c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e167      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x200>
 80015ce:	e01b      	b.n	8001608 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_RCC_OscConfig+0x248>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fb61 	bl	8000c9c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	e00e      	b.n	80015fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015de:	f7ff fb5d 	bl	8000c9c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d907      	bls.n	80015fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e150      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
 80015f0:	40023800 	.word	0x40023800
 80015f4:	42470000 	.word	0x42470000
 80015f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	4b88      	ldr	r3, [pc, #544]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ea      	bne.n	80015de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 8097 	beq.w	8001744 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161a:	4b81      	ldr	r3, [pc, #516]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10f      	bne.n	8001646 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b7d      	ldr	r3, [pc, #500]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a7c      	ldr	r2, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b7a      	ldr	r3, [pc, #488]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b77      	ldr	r3, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b74      	ldr	r3, [pc, #464]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a73      	ldr	r2, [pc, #460]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7ff fb1d 	bl	8000c9c <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7ff fb19 	bl	8000c9c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e10c      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_OscConfig+0x474>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x2ea>
 800168c:	4b64      	ldr	r3, [pc, #400]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a63      	ldr	r2, [pc, #396]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	e01c      	b.n	80016d4 <HAL_RCC_OscConfig+0x324>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x30c>
 80016a2:	4b5f      	ldr	r3, [pc, #380]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	4a5e      	ldr	r2, [pc, #376]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6713      	str	r3, [r2, #112]	; 0x70
 80016ae:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	4a5b      	ldr	r2, [pc, #364]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0x324>
 80016bc:	4b58      	ldr	r3, [pc, #352]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a57      	ldr	r2, [pc, #348]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
 80016c8:	4b55      	ldr	r3, [pc, #340]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a54      	ldr	r2, [pc, #336]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d015      	beq.n	8001708 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fade 	bl	8000c9c <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff fada 	bl	8000c9c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e0cb      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fa:	4b49      	ldr	r3, [pc, #292]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0ee      	beq.n	80016e4 <HAL_RCC_OscConfig+0x334>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff fac8 	bl	8000c9c <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff fac4 	bl	8000c9c <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e0b5      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ee      	bne.n	8001710 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	4a38      	ldr	r2, [pc, #224]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001742:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80a1 	beq.w	8001890 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b08      	cmp	r3, #8
 8001758:	d05c      	beq.n	8001814 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d141      	bne.n	80017e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_RCC_OscConfig+0x478>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fa98 	bl	8000c9c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff fa94 	bl	8000c9c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e087      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	491b      	ldr	r1, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x478>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fa6d 	bl	8000c9c <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff fa69 	bl	8000c9c <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e05c      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x416>
 80017e4:	e054      	b.n	8001890 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_RCC_OscConfig+0x478>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fa56 	bl	8000c9c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fa52 	bl	8000c9c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e045      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_RCC_OscConfig+0x470>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x444>
 8001812:	e03d      	b.n	8001890 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e038      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000
 8001828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_RCC_OscConfig+0x4ec>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d028      	beq.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d121      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d11a      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800185c:	4013      	ands	r3, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001864:	4293      	cmp	r3, r2
 8001866:	d111      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	3b01      	subs	r3, #1
 8001876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d107      	bne.n	800188c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0cc      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d90c      	bls.n	80018dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0b8      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f4:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001918:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	494d      	ldr	r1, [pc, #308]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d044      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d119      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d003      	beq.n	800195e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	2b03      	cmp	r3, #3
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e06f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e067      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f023 0203 	bic.w	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4934      	ldr	r1, [pc, #208]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001990:	f7ff f984 	bl	8000c9c <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff f980 	bl	8000c9c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e04f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 020c 	and.w	r2, r3, #12
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1eb      	bne.n	8001998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c0:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d20c      	bcs.n	80019e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e032      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4916      	ldr	r1, [pc, #88]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	490e      	ldr	r1, [pc, #56]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a26:	f000 f821 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	490a      	ldr	r1, [pc, #40]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	5ccb      	ldrb	r3, [r1, r3]
 8001a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f8e4 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	08005244 	.word	0x08005244
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a70:	b090      	sub	sp, #64	; 0x40
 8001a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a84:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCC_GetSysClockFreq+0x180>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d00d      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x40>
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	f200 80a1 	bhi.w	8001bd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a9e:	e09b      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001aa4:	e09b      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa6:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aaa:	e098      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aac:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <HAL_RCC_GetSysClockFreq+0x180>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab6:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d028      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	099b      	lsrs	r3, r3, #6
 8001ac8:	2200      	movs	r2, #0
 8001aca:	623b      	str	r3, [r7, #32]
 8001acc:	627a      	str	r2, [r7, #36]	; 0x24
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ad8:	fb03 f201 	mul.w	r2, r3, r1
 8001adc:	2300      	movs	r3, #0
 8001ade:	fb00 f303 	mul.w	r3, r0, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a43      	ldr	r2, [pc, #268]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ae6:	fba0 1202 	umull	r1, r2, r0, r2
 8001aea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aec:	460a      	mov	r2, r1
 8001aee:	62ba      	str	r2, [r7, #40]	; 0x28
 8001af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af2:	4413      	add	r3, r2
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af8:	2200      	movs	r2, #0
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	61fa      	str	r2, [r7, #28]
 8001afe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b06:	f7fe fbbb 	bl	8000280 <__aeabi_uldivmod>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4613      	mov	r3, r2
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b12:	e053      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b14:	4b35      	ldr	r3, [pc, #212]	; (8001bec <HAL_RCC_GetSysClockFreq+0x180>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	617a      	str	r2, [r7, #20]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b26:	f04f 0b00 	mov.w	fp, #0
 8001b2a:	4652      	mov	r2, sl
 8001b2c:	465b      	mov	r3, fp
 8001b2e:	f04f 0000 	mov.w	r0, #0
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	0159      	lsls	r1, r3, #5
 8001b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3c:	0150      	lsls	r0, r2, #5
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	ebb2 080a 	subs.w	r8, r2, sl
 8001b46:	eb63 090b 	sbc.w	r9, r3, fp
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b5e:	ebb2 0408 	subs.w	r4, r2, r8
 8001b62:	eb63 0509 	sbc.w	r5, r3, r9
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	00eb      	lsls	r3, r5, #3
 8001b70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b74:	00e2      	lsls	r2, r4, #3
 8001b76:	4614      	mov	r4, r2
 8001b78:	461d      	mov	r5, r3
 8001b7a:	eb14 030a 	adds.w	r3, r4, sl
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	eb45 030b 	adc.w	r3, r5, fp
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b92:	4629      	mov	r1, r5
 8001b94:	028b      	lsls	r3, r1, #10
 8001b96:	4621      	mov	r1, r4
 8001b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	028a      	lsls	r2, r1, #10
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	60fa      	str	r2, [r7, #12]
 8001bac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bb0:	f7fe fb66 	bl	8000280 <__aeabi_uldivmod>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4613      	mov	r3, r2
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_GetSysClockFreq+0x180>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	0c1b      	lsrs	r3, r3, #16
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bd6:	e002      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3740      	adds	r7, #64	; 0x40
 8001be4:	46bd      	mov	sp, r7
 8001be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	00f42400 	.word	0x00f42400
 8001bf4:	017d7840 	.word	0x017d7840

08001bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000

08001c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c14:	f7ff fff0 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0a9b      	lsrs	r3, r3, #10
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	4903      	ldr	r1, [pc, #12]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	08005254 	.word	0x08005254

08001c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c3c:	f7ff ffdc 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0b5b      	lsrs	r3, r3, #13
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08005254 	.word	0x08005254

08001c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e03f      	b.n	8001cf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe ff28 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2224      	movs	r2, #36	; 0x24
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fddf 	bl	8002868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b08a      	sub	sp, #40	; 0x28
 8001cfe:	af02      	add	r7, sp, #8
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4613      	mov	r3, r2
 8001d08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d17c      	bne.n	8001e14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_UART_Transmit+0x2c>
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e075      	b.n	8001e16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_UART_Transmit+0x3e>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e06e      	b.n	8001e16 <HAL_UART_Transmit+0x11c>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2221      	movs	r2, #33	; 0x21
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d4e:	f7fe ffa5 	bl	8000c9c <HAL_GetTick>
 8001d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	88fa      	ldrh	r2, [r7, #6]
 8001d58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	88fa      	ldrh	r2, [r7, #6]
 8001d5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d68:	d108      	bne.n	8001d7c <HAL_UART_Transmit+0x82>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	e003      	b.n	8001d84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d8c:	e02a      	b.n	8001de4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2200      	movs	r2, #0
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 fb1f 	bl	80023dc <UART_WaitOnFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e036      	b.n	8001e16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10b      	bne.n	8001dc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	e007      	b.n	8001dd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1cf      	bne.n	8001d8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2200      	movs	r2, #0
 8001df6:	2140      	movs	r1, #64	; 0x40
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 faef 	bl	80023dc <UART_WaitOnFlagUntilTimeout>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e006      	b.n	8001e16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e000      	b.n	8001e16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3720      	adds	r7, #32
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d11d      	bne.n	8001e74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_UART_Receive_IT+0x26>
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e016      	b.n	8001e76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_UART_Receive_IT+0x38>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e00f      	b.n	8001e76 <HAL_UART_Receive_IT+0x58>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 fb24 	bl	80024b8 <UART_Start_Receive_IT>
 8001e70:	4603      	mov	r3, r0
 8001e72:	e000      	b.n	8001e76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b0ba      	sub	sp, #232	; 0xe8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10f      	bne.n	8001ee6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x66>
 8001ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fc07 	bl	80026f2 <UART_Receive_IT>
      return;
 8001ee4:	e256      	b.n	8002394 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80de 	beq.w	80020ac <HAL_UART_IRQHandler+0x22c>
 8001ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80d1 	beq.w	80020ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_UART_IRQHandler+0xae>
 8001f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_UART_IRQHandler+0xd2>
 8001f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f043 0202 	orr.w	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_UART_IRQHandler+0xf6>
 8001f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f043 0204 	orr.w	r2, r3, #4
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d011      	beq.n	8001fa6 <HAL_UART_IRQHandler+0x126>
 8001f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f043 0208 	orr.w	r2, r3, #8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 81ed 	beq.w	800238a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_UART_IRQHandler+0x14e>
 8001fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fb92 	bl	80026f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd8:	2b40      	cmp	r3, #64	; 0x40
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d103      	bne.n	8001ffa <HAL_UART_IRQHandler+0x17a>
 8001ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d04f      	beq.n	800209a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fa9a 	bl	8002534 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d141      	bne.n	8002092 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3314      	adds	r3, #20
 8002014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800201c:	e853 3f00 	ldrex	r3, [r3]
 8002020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800202c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3314      	adds	r3, #20
 8002036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800203a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800203e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800204a:	e841 2300 	strex	r3, r2, [r1]
 800204e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1d9      	bne.n	800200e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	2b00      	cmp	r3, #0
 8002060:	d013      	beq.n	800208a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002066:	4a7d      	ldr	r2, [pc, #500]	; (800225c <HAL_UART_IRQHandler+0x3dc>)
 8002068:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe ffc5 	bl	8000ffe <HAL_DMA_Abort_IT>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002084:	4610      	mov	r0, r2
 8002086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002088:	e00e      	b.n	80020a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f990 	bl	80023b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002090:	e00a      	b.n	80020a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f98c 	bl	80023b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002098:	e006      	b.n	80020a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f988 	bl	80023b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80020a6:	e170      	b.n	800238a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a8:	bf00      	nop
    return;
 80020aa:	e16e      	b.n	800238a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	f040 814a 	bne.w	800234a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8143 	beq.w	800234a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 813c 	beq.w	800234a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	f040 80b4 	bne.w	8002260 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8140 	beq.w	800238e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002116:	429a      	cmp	r2, r3
 8002118:	f080 8139 	bcs.w	800238e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002122:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212e:	f000 8088 	beq.w	8002242 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	330c      	adds	r3, #12
 8002138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002140:	e853 3f00 	ldrex	r3, [r3]
 8002144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800214c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	330c      	adds	r3, #12
 800215a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800215e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002166:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800216a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800216e:	e841 2300 	strex	r3, r2, [r1]
 8002172:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1d9      	bne.n	8002132 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3314      	adds	r3, #20
 8002184:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002188:	e853 3f00 	ldrex	r3, [r3]
 800218c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800218e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3314      	adds	r3, #20
 800219e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80021a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80021aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021ae:	e841 2300 	strex	r3, r2, [r1]
 80021b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80021b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1e1      	bne.n	800217e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3314      	adds	r3, #20
 80021c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c4:	e853 3f00 	ldrex	r3, [r3]
 80021c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80021ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	3314      	adds	r3, #20
 80021da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80021de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80021e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021e6:	e841 2300 	strex	r3, r2, [r1]
 80021ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80021ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1e3      	bne.n	80021ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	330c      	adds	r3, #12
 8002206:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220a:	e853 3f00 	ldrex	r3, [r3]
 800220e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002212:	f023 0310 	bic.w	r3, r3, #16
 8002216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	330c      	adds	r3, #12
 8002220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002224:	65ba      	str	r2, [r7, #88]	; 0x58
 8002226:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002228:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800222a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800222c:	e841 2300 	strex	r3, r2, [r1]
 8002230:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e3      	bne.n	8002200 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fe6e 	bl	8000f1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800224a:	b29b      	uxth	r3, r3
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	b29b      	uxth	r3, r3
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8b6 	bl	80023c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002258:	e099      	b.n	800238e <HAL_UART_IRQHandler+0x50e>
 800225a:	bf00      	nop
 800225c:	080025fb 	.word	0x080025fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002268:	b29b      	uxth	r3, r3
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 808b 	beq.w	8002392 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800227c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8086 	beq.w	8002392 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	330c      	adds	r3, #12
 800228c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	e853 3f00 	ldrex	r3, [r3]
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800229c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	330c      	adds	r3, #12
 80022a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80022aa:	647a      	str	r2, [r7, #68]	; 0x44
 80022ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022b2:	e841 2300 	strex	r3, r2, [r1]
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80022b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1e3      	bne.n	8002286 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3314      	adds	r3, #20
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	e853 3f00 	ldrex	r3, [r3]
 80022cc:	623b      	str	r3, [r7, #32]
   return(result);
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3314      	adds	r3, #20
 80022de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80022e2:	633a      	str	r2, [r7, #48]	; 0x30
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ea:	e841 2300 	strex	r3, r2, [r1]
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e3      	bne.n	80022be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	330c      	adds	r3, #12
 800230a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	e853 3f00 	ldrex	r3, [r3]
 8002312:	60fb      	str	r3, [r7, #12]
   return(result);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 0310 	bic.w	r3, r3, #16
 800231a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	330c      	adds	r3, #12
 8002324:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002328:	61fa      	str	r2, [r7, #28]
 800232a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232c:	69b9      	ldr	r1, [r7, #24]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	e841 2300 	strex	r3, r2, [r1]
 8002334:	617b      	str	r3, [r7, #20]
   return(result);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e3      	bne.n	8002304 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800233c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f83e 	bl	80023c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002348:	e023      	b.n	8002392 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800234a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_UART_IRQHandler+0x4ea>
 8002356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800235a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f95d 	bl	8002622 <UART_Transmit_IT>
    return;
 8002368:	e014      	b.n	8002394 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800236a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00e      	beq.n	8002394 <HAL_UART_IRQHandler+0x514>
 8002376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f99d 	bl	80026c2 <UART_EndTransmit_IT>
    return;
 8002388:	e004      	b.n	8002394 <HAL_UART_IRQHandler+0x514>
    return;
 800238a:	bf00      	nop
 800238c:	e002      	b.n	8002394 <HAL_UART_IRQHandler+0x514>
      return;
 800238e:	bf00      	nop
 8002390:	e000      	b.n	8002394 <HAL_UART_IRQHandler+0x514>
      return;
 8002392:	bf00      	nop
  }
}
 8002394:	37e8      	adds	r7, #232	; 0xe8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop

0800239c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b090      	sub	sp, #64	; 0x40
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ec:	e050      	b.n	8002490 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d04c      	beq.n	8002490 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <UART_WaitOnFlagUntilTimeout+0x30>
 80023fc:	f7fe fc4e 	bl	8000c9c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002408:	429a      	cmp	r2, r3
 800240a:	d241      	bcs.n	8002490 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	e853 3f00 	ldrex	r3, [r3]
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800242c:	637a      	str	r2, [r7, #52]	; 0x34
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002434:	e841 2300 	strex	r3, r2, [r1]
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e5      	bne.n	800240c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3314      	adds	r3, #20
 8002446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	e853 3f00 	ldrex	r3, [r3]
 800244e:	613b      	str	r3, [r7, #16]
   return(result);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	63bb      	str	r3, [r7, #56]	; 0x38
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3314      	adds	r3, #20
 800245e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002460:	623a      	str	r2, [r7, #32]
 8002462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002464:	69f9      	ldr	r1, [r7, #28]
 8002466:	6a3a      	ldr	r2, [r7, #32]
 8002468:	e841 2300 	strex	r3, r2, [r1]
 800246c:	61bb      	str	r3, [r7, #24]
   return(result);
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e5      	bne.n	8002440 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e00f      	b.n	80024b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4013      	ands	r3, r2
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d09f      	beq.n	80023ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3740      	adds	r7, #64	; 0x40
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	88fa      	ldrh	r2, [r7, #6]
 80024d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	88fa      	ldrh	r2, [r7, #6]
 80024d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2222      	movs	r2, #34	; 0x22
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002504:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0220 	orr.w	r2, r2, #32
 8002524:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002534:	b480      	push	{r7}
 8002536:	b095      	sub	sp, #84	; 0x54
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	330c      	adds	r3, #12
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002546:	e853 3f00 	ldrex	r3, [r3]
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800255c:	643a      	str	r2, [r7, #64]	; 0x40
 800255e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002560:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002564:	e841 2300 	strex	r3, r2, [r1]
 8002568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e5      	bne.n	800253c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3314      	adds	r3, #20
 8002576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	e853 3f00 	ldrex	r3, [r3]
 800257e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	64bb      	str	r3, [r7, #72]	; 0x48
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3314      	adds	r3, #20
 800258e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002590:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002598:	e841 2300 	strex	r3, r2, [r1]
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e5      	bne.n	8002570 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d119      	bne.n	80025e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	e853 3f00 	ldrex	r3, [r3]
 80025ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f023 0310 	bic.w	r3, r3, #16
 80025c2:	647b      	str	r3, [r7, #68]	; 0x44
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	330c      	adds	r3, #12
 80025ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025cc:	61ba      	str	r2, [r7, #24]
 80025ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d0:	6979      	ldr	r1, [r7, #20]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	e841 2300 	strex	r3, r2, [r1]
 80025d8:	613b      	str	r3, [r7, #16]
   return(result);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e5      	bne.n	80025ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025ee:	bf00      	nop
 80025f0:	3754      	adds	r7, #84	; 0x54
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff fecb 	bl	80023b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b21      	cmp	r3, #33	; 0x21
 8002634:	d13e      	bne.n	80026b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263e:	d114      	bne.n	800266a <UART_Transmit_IT+0x48>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d110      	bne.n	800266a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800265c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	1c9a      	adds	r2, r3, #2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	621a      	str	r2, [r3, #32]
 8002668:	e008      	b.n	800267c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	1c59      	adds	r1, r3, #1
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6211      	str	r1, [r2, #32]
 8002674:	781a      	ldrb	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29b      	uxth	r3, r3
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4619      	mov	r1, r3
 800268a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10f      	bne.n	80026b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800269e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fe5a 	bl	800239c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b08c      	sub	sp, #48	; 0x30
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b22      	cmp	r3, #34	; 0x22
 8002704:	f040 80ab 	bne.w	800285e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002710:	d117      	bne.n	8002742 <UART_Receive_IT+0x50>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d113      	bne.n	8002742 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	b29b      	uxth	r3, r3
 800272c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002730:	b29a      	uxth	r2, r3
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	1c9a      	adds	r2, r3, #2
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
 8002740:	e026      	b.n	8002790 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002754:	d007      	beq.n	8002766 <UART_Receive_IT+0x74>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <UART_Receive_IT+0x82>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e008      	b.n	8002786 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002780:	b2da      	uxtb	r2, r3
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29b      	uxth	r3, r3
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4619      	mov	r1, r3
 800279e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d15a      	bne.n	800285a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0220 	bic.w	r2, r2, #32
 80027b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d135      	bne.n	8002850 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	330c      	adds	r3, #12
 80027f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	e853 3f00 	ldrex	r3, [r3]
 80027f8:	613b      	str	r3, [r7, #16]
   return(result);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f023 0310 	bic.w	r3, r3, #16
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280a:	623a      	str	r2, [r7, #32]
 800280c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280e:	69f9      	ldr	r1, [r7, #28]
 8002810:	6a3a      	ldr	r2, [r7, #32]
 8002812:	e841 2300 	strex	r3, r2, [r1]
 8002816:	61bb      	str	r3, [r7, #24]
   return(result);
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e5      	bne.n	80027ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b10      	cmp	r3, #16
 800282a:	d10a      	bne.n	8002842 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fdbb 	bl	80023c4 <HAL_UARTEx_RxEventCallback>
 800284e:	e002      	b.n	8002856 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fd ff7d 	bl	8000750 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e002      	b.n	8002860 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
  }
}
 8002860:	4618      	mov	r0, r3
 8002862:	3730      	adds	r7, #48	; 0x30
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	b0c0      	sub	sp, #256	; 0x100
 800286e:	af00      	add	r7, sp, #0
 8002870:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	ea40 0301 	orr.w	r3, r0, r1
 8002890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	431a      	orrs	r2, r3
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028c0:	f021 010c 	bic.w	r1, r1, #12
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028ce:	430b      	orrs	r3, r1
 80028d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e2:	6999      	ldr	r1, [r3, #24]
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	ea40 0301 	orr.w	r3, r0, r1
 80028ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4b8f      	ldr	r3, [pc, #572]	; (8002b34 <UART_SetConfig+0x2cc>)
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d005      	beq.n	8002908 <UART_SetConfig+0xa0>
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b8d      	ldr	r3, [pc, #564]	; (8002b38 <UART_SetConfig+0x2d0>)
 8002904:	429a      	cmp	r2, r3
 8002906:	d104      	bne.n	8002912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002908:	f7ff f996 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 800290c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002910:	e003      	b.n	800291a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002912:	f7ff f97d 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8002916:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002924:	f040 810c 	bne.w	8002b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800292c:	2200      	movs	r2, #0
 800292e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800293a:	4622      	mov	r2, r4
 800293c:	462b      	mov	r3, r5
 800293e:	1891      	adds	r1, r2, r2
 8002940:	65b9      	str	r1, [r7, #88]	; 0x58
 8002942:	415b      	adcs	r3, r3
 8002944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800294a:	4621      	mov	r1, r4
 800294c:	eb12 0801 	adds.w	r8, r2, r1
 8002950:	4629      	mov	r1, r5
 8002952:	eb43 0901 	adc.w	r9, r3, r1
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800296a:	4690      	mov	r8, r2
 800296c:	4699      	mov	r9, r3
 800296e:	4623      	mov	r3, r4
 8002970:	eb18 0303 	adds.w	r3, r8, r3
 8002974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002978:	462b      	mov	r3, r5
 800297a:	eb49 0303 	adc.w	r3, r9, r3
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800298e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002996:	460b      	mov	r3, r1
 8002998:	18db      	adds	r3, r3, r3
 800299a:	653b      	str	r3, [r7, #80]	; 0x50
 800299c:	4613      	mov	r3, r2
 800299e:	eb42 0303 	adc.w	r3, r2, r3
 80029a2:	657b      	str	r3, [r7, #84]	; 0x54
 80029a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029ac:	f7fd fc68 	bl	8000280 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <UART_SetConfig+0x2d4>)
 80029b6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	011c      	lsls	r4, r3, #4
 80029be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	1891      	adds	r1, r2, r2
 80029d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80029d8:	415b      	adcs	r3, r3
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029e0:	4641      	mov	r1, r8
 80029e2:	eb12 0a01 	adds.w	sl, r2, r1
 80029e6:	4649      	mov	r1, r9
 80029e8:	eb43 0b01 	adc.w	fp, r3, r1
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a00:	4692      	mov	sl, r2
 8002a02:	469b      	mov	fp, r3
 8002a04:	4643      	mov	r3, r8
 8002a06:	eb1a 0303 	adds.w	r3, sl, r3
 8002a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	eb4b 0303 	adc.w	r3, fp, r3
 8002a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	18db      	adds	r3, r3, r3
 8002a30:	643b      	str	r3, [r7, #64]	; 0x40
 8002a32:	4613      	mov	r3, r2
 8002a34:	eb42 0303 	adc.w	r3, r2, r3
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a42:	f7fd fc1d 	bl	8000280 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2264      	movs	r2, #100	; 0x64
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	1acb      	subs	r3, r1, r3
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a62:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002a64:	fba3 2302 	umull	r2, r3, r3, r2
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a70:	441c      	add	r4, r3
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a94:	4641      	mov	r1, r8
 8002a96:	1851      	adds	r1, r2, r1
 8002a98:	6339      	str	r1, [r7, #48]	; 0x30
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	414b      	adcs	r3, r1
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002aac:	4659      	mov	r1, fp
 8002aae:	00cb      	lsls	r3, r1, #3
 8002ab0:	4651      	mov	r1, sl
 8002ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	00ca      	lsls	r2, r1, #3
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	189b      	adds	r3, r3, r2
 8002ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ac8:	464b      	mov	r3, r9
 8002aca:	460a      	mov	r2, r1
 8002acc:	eb42 0303 	adc.w	r3, r2, r3
 8002ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ae8:	460b      	mov	r3, r1
 8002aea:	18db      	adds	r3, r3, r3
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aee:	4613      	mov	r3, r2
 8002af0:	eb42 0303 	adc.w	r3, r2, r3
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002afe:	f7fd fbbf 	bl	8000280 <__aeabi_uldivmod>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002b08:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	2164      	movs	r1, #100	; 0x64
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	3332      	adds	r3, #50	; 0x32
 8002b1a:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	f003 0207 	and.w	r2, r3, #7
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4422      	add	r2, r4
 8002b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b30:	e105      	b.n	8002d3e <UART_SetConfig+0x4d6>
 8002b32:	bf00      	nop
 8002b34:	40011000 	.word	0x40011000
 8002b38:	40011400 	.word	0x40011400
 8002b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b52:	4642      	mov	r2, r8
 8002b54:	464b      	mov	r3, r9
 8002b56:	1891      	adds	r1, r2, r2
 8002b58:	6239      	str	r1, [r7, #32]
 8002b5a:	415b      	adcs	r3, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b62:	4641      	mov	r1, r8
 8002b64:	1854      	adds	r4, r2, r1
 8002b66:	4649      	mov	r1, r9
 8002b68:	eb43 0501 	adc.w	r5, r3, r1
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	00eb      	lsls	r3, r5, #3
 8002b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7a:	00e2      	lsls	r2, r4, #3
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	461d      	mov	r5, r3
 8002b80:	4643      	mov	r3, r8
 8002b82:	18e3      	adds	r3, r4, r3
 8002b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b88:	464b      	mov	r3, r9
 8002b8a:	eb45 0303 	adc.w	r3, r5, r3
 8002b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bae:	4629      	mov	r1, r5
 8002bb0:	008b      	lsls	r3, r1, #2
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb8:	4621      	mov	r1, r4
 8002bba:	008a      	lsls	r2, r1, #2
 8002bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bc0:	f7fd fb5e 	bl	8000280 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4b60      	ldr	r3, [pc, #384]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002bca:	fba3 2302 	umull	r2, r3, r3, r2
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	011c      	lsls	r4, r3, #4
 8002bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	1891      	adds	r1, r2, r2
 8002bea:	61b9      	str	r1, [r7, #24]
 8002bec:	415b      	adcs	r3, r3
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	1851      	adds	r1, r2, r1
 8002bf8:	6139      	str	r1, [r7, #16]
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	414b      	adcs	r3, r1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	00cb      	lsls	r3, r1, #3
 8002c10:	4651      	mov	r1, sl
 8002c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c16:	4651      	mov	r1, sl
 8002c18:	00ca      	lsls	r2, r1, #3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4642      	mov	r2, r8
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c28:	464b      	mov	r3, r9
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	eb42 0303 	adc.w	r3, r2, r3
 8002c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	008b      	lsls	r3, r1, #2
 8002c50:	4641      	mov	r1, r8
 8002c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c56:	4641      	mov	r1, r8
 8002c58:	008a      	lsls	r2, r1, #2
 8002c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c5e:	f7fd fb0f 	bl	8000280 <__aeabi_uldivmod>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002c68:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	2164      	movs	r1, #100	; 0x64
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	3332      	adds	r3, #50	; 0x32
 8002c7a:	4a34      	ldr	r2, [pc, #208]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c86:	441c      	add	r4, r3
 8002c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002c90:	677a      	str	r2, [r7, #116]	; 0x74
 8002c92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c96:	4642      	mov	r2, r8
 8002c98:	464b      	mov	r3, r9
 8002c9a:	1891      	adds	r1, r2, r2
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	415b      	adcs	r3, r3
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	1851      	adds	r1, r2, r1
 8002caa:	6039      	str	r1, [r7, #0]
 8002cac:	4649      	mov	r1, r9
 8002cae:	414b      	adcs	r3, r1
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cbe:	4659      	mov	r1, fp
 8002cc0:	00cb      	lsls	r3, r1, #3
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc8:	4651      	mov	r1, sl
 8002cca:	00ca      	lsls	r2, r1, #3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4642      	mov	r2, r8
 8002cd4:	189b      	adds	r3, r3, r2
 8002cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd8:	464b      	mov	r3, r9
 8002cda:	460a      	mov	r2, r1
 8002cdc:	eb42 0303 	adc.w	r3, r2, r3
 8002ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	663b      	str	r3, [r7, #96]	; 0x60
 8002cec:	667a      	str	r2, [r7, #100]	; 0x64
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	008b      	lsls	r3, r1, #2
 8002cfe:	4641      	mov	r1, r8
 8002d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d04:	4641      	mov	r1, r8
 8002d06:	008a      	lsls	r2, r1, #2
 8002d08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d0c:	f7fd fab8 	bl	8000280 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002d16:	fba3 1302 	umull	r1, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2164      	movs	r1, #100	; 0x64
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	3332      	adds	r3, #50	; 0x32
 8002d28:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4422      	add	r2, r4
 8002d3c:	609a      	str	r2, [r3, #8]
}
 8002d3e:	bf00      	nop
 8002d40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4a:	bf00      	nop
 8002d4c:	51eb851f 	.word	0x51eb851f

08002d50 <ESP8266_ATSendBuf>:
}


//Отправьте данные фиксированной длины на ESP8266
void ESP8266_ATSendBuf(uint8_t* buf,uint16_t len)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
	memset(usart1_rxbuf,0, 256);
 8002d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d60:	2100      	movs	r1, #0
 8002d62:	4808      	ldr	r0, [pc, #32]	; (8002d84 <ESP8266_ATSendBuf+0x34>)
 8002d64:	f001 f845 	bl	8003df2 <memset>

	//Установите общее количество принятых последовательных портов равным 0 перед каждой передачей, чтобы получать
	usart1_rxcounter = 0;
 8002d68:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <ESP8266_ATSendBuf+0x38>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]

	//Доставка фиксированной длины
	HAL_UART_Transmit(&huart1,(uint8_t *)buf,len,0xFFFF);
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <ESP8266_ATSendBuf+0x3c>)
 8002d78:	f7fe ffbf 	bl	8001cfa <HAL_UART_Transmit>
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200001e0 	.word	0x200001e0
 8002d88:	200003e1 	.word	0x200003e1
 8002d8c:	20000098 	.word	0x20000098

08002d90 <ESP8266_ATSendString>:

//Отправить строку в ESP8266
void ESP8266_ATSendString(char* str)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  memset(usart1_rxbuf,0, 256);
 8002d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	480a      	ldr	r0, [pc, #40]	; (8002dc8 <ESP8266_ATSendString+0x38>)
 8002da0:	f001 f827 	bl	8003df2 <memset>

	//Установите общее количество принятых последовательных портов равным 0 перед каждой передачей, чтобы получать
	usart1_rxcounter = 0;
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <ESP8266_ATSendString+0x3c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]

	//Способ отправки 1
	//while(*str)		USART1_SendOneByte(*str++);

	//Способ отправки 2
	HAL_UART_Transmit(&huart1,(uint8_t *)str,strlen(str),0xFFFF);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd fa10 	bl	80001d0 <strlen>
 8002db0:	4603      	mov	r3, r0
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <ESP8266_ATSendString+0x40>)
 8002dbc:	f7fe ff9d 	bl	8001cfa <HAL_UART_Transmit>
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200001e0 	.word	0x200001e0
 8002dcc:	200003e1 	.word	0x200003e1
 8002dd0:	20000098 	.word	0x20000098

08002dd4 <ESP8266_ExitUnvarnishedTrans>:

//Выход из прозрачной передачи
void ESP8266_ExitUnvarnishedTrans(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
	ESP8266_ATSendString("+++");
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <ESP8266_ExitUnvarnishedTrans+0x20>)
 8002dda:	f7ff ffd9 	bl	8002d90 <ESP8266_ATSendString>
	HAL_Delay(50);
 8002dde:	2032      	movs	r0, #50	; 0x32
 8002de0:	f7fd ff68 	bl	8000cb4 <HAL_Delay>
	ESP8266_ATSendString("+++");
 8002de4:	4803      	ldr	r0, [pc, #12]	; (8002df4 <ESP8266_ExitUnvarnishedTrans+0x20>)
 8002de6:	f7ff ffd3 	bl	8002d90 <ESP8266_ATSendString>
	HAL_Delay(50);
 8002dea:	2032      	movs	r0, #50	; 0x32
 8002dec:	f7fd ff62 	bl	8000cb4 <HAL_Delay>
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	08005180 	.word	0x08005180

08002df8 <FindStr>:

//Найти, содержит ли строка другую строку
uint8_t FindStr(char* dest,char* src,uint16_t retry_nms)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	4613      	mov	r3, r2
 8002e04:	80fb      	strh	r3, [r7, #6]
	retry_nms/=10;                   //Перерыв
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <FindStr+0x50>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	80fb      	strh	r3, [r7, #6]

	while(strstr(dest,src)==0 && retry_nms--)//Подождите, пока последовательный порт примет или завершит работу по истечении тайм-аута
 8002e12:	e002      	b.n	8002e1a <FindStr+0x22>
	{
		HAL_Delay(10);
 8002e14:	200a      	movs	r0, #10
 8002e16:	f7fd ff4d 	bl	8000cb4 <HAL_Delay>
	while(strstr(dest,src)==0 && retry_nms--)//Подождите, пока последовательный порт примет или завершит работу по истечении тайм-аута
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f001 f96e 	bl	80040fe <strstr>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <FindStr+0x3a>
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	1e5a      	subs	r2, r3, #1
 8002e2c:	80fa      	strh	r2, [r7, #6]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <FindStr+0x1c>
	}

	if(retry_nms) return 1;
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <FindStr+0x44>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <FindStr+0x46>

	return 0;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	cccccccd 	.word	0xcccccccd

08002e4c <ESP8266_Check>:
 * Возвращаемое значение: статус возврата ESP8266
 * Не-008266 нормальный
 * 008266 Возникла проблема
 */
uint8_t ESP8266_Check(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
	uint8_t check_cnt=5;
 8002e52:	2305      	movs	r3, #5
 8002e54:	71fb      	strb	r3, [r7, #7]
	while(check_cnt--)
 8002e56:	e012      	b.n	8002e7e <ESP8266_Check+0x32>
	{
		memset(usart1_rxbuf,0,sizeof(usart1_rxbuf)); 	 //Очистить буфер приема
 8002e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	480d      	ldr	r0, [pc, #52]	; (8002e94 <ESP8266_Check+0x48>)
 8002e60:	f000 ffc7 	bl	8003df2 <memset>
		ESP8266_ATSendString("AT\r\n");     		 			//Отправить ПО команде рукопожатия
 8002e64:	480c      	ldr	r0, [pc, #48]	; (8002e98 <ESP8266_Check+0x4c>)
 8002e66:	f7ff ff93 	bl	8002d90 <ESP8266_ATSendString>
		if(FindStr((char*)usart1_rxbuf,"OK",200) != 0)
 8002e6a:	22c8      	movs	r2, #200	; 0xc8
 8002e6c:	490b      	ldr	r1, [pc, #44]	; (8002e9c <ESP8266_Check+0x50>)
 8002e6e:	4809      	ldr	r0, [pc, #36]	; (8002e94 <ESP8266_Check+0x48>)
 8002e70:	f7ff ffc2 	bl	8002df8 <FindStr>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <ESP8266_Check+0x32>
		{
			return 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e005      	b.n	8002e8a <ESP8266_Check+0x3e>
	while(check_cnt--)
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	71fa      	strb	r2, [r7, #7]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e7      	bne.n	8002e58 <ESP8266_Check+0xc>
		}
	}
	return 0;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	200001e0 	.word	0x200001e0
 8002e98:	08005184 	.word	0x08005184
 8002e9c:	0800518c 	.word	0x0800518c

08002ea0 <ESP8266_Init>:
 *Функция: Инициализация ESP8266
 *Параметр: Отсутствует
 * Возвращаемое значение: результат инициализации, отличное от 0 - успешная инициализация, 0 - сбой
 */
uint8_t ESP8266_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eaa:	4821      	ldr	r0, [pc, #132]	; (8002f30 <ESP8266_Init+0x90>)
 8002eac:	f7fe fa66 	bl	800137c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002eb0:	2064      	movs	r0, #100	; 0x64
 8002eb2:	f7fd feff 	bl	8000cb4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ebc:	481c      	ldr	r0, [pc, #112]	; (8002f30 <ESP8266_Init+0x90>)
 8002ebe:	f7fe fa5d 	bl	800137c <HAL_GPIO_WritePin>
	//Очистить массивы отправки и получения
	memset(usart1_txbuf,0,sizeof(usart1_txbuf));
 8002ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	481a      	ldr	r0, [pc, #104]	; (8002f34 <ESP8266_Init+0x94>)
 8002eca:	f000 ff92 	bl	8003df2 <memset>
	memset(usart1_rxbuf,0,sizeof(usart1_rxbuf));
 8002ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4818      	ldr	r0, [pc, #96]	; (8002f38 <ESP8266_Init+0x98>)
 8002ed6:	f000 ff8c 	bl	8003df2 <memset>

	ESP8266_ExitUnvarnishedTrans();		//Выход из прозрачной передачи
 8002eda:	f7ff ff7b 	bl	8002dd4 <ESP8266_ExitUnvarnishedTrans>
	HAL_Delay(500);
 8002ede:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ee2:	f7fd fee7 	bl	8000cb4 <HAL_Delay>
	ESP8266_ATSendString("AT+RST\r\n");
 8002ee6:	4815      	ldr	r0, [pc, #84]	; (8002f3c <ESP8266_Init+0x9c>)
 8002ee8:	f7ff ff52 	bl	8002d90 <ESP8266_ATSendString>
	HAL_Delay(800);
 8002eec:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002ef0:	f7fd fee0 	bl	8000cb4 <HAL_Delay>
	if(ESP8266_Check()==0)              //Используйте команду AT, чтобы проверить, существует ли ESP8266
 8002ef4:	f7ff ffaa 	bl	8002e4c <ESP8266_Check>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <ESP8266_Init+0x62>
	{
		return 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e014      	b.n	8002f2c <ESP8266_Init+0x8c>
	}

	memset(usart1_rxbuf,0,sizeof(usart1_rxbuf));    //Очистить буфер приема
 8002f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f06:	2100      	movs	r1, #0
 8002f08:	480b      	ldr	r0, [pc, #44]	; (8002f38 <ESP8266_Init+0x98>)
 8002f0a:	f000 ff72 	bl	8003df2 <memset>
	ESP8266_ATSendString("ATE0\r\n");     	//Отключить эхо
 8002f0e:	480c      	ldr	r0, [pc, #48]	; (8002f40 <ESP8266_Init+0xa0>)
 8002f10:	f7ff ff3e 	bl	8002d90 <ESP8266_ATSendString>
	if(FindStr((char*)usart1_rxbuf,"OK",500)==0)  //Неудачная настройка
 8002f14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f18:	490a      	ldr	r1, [pc, #40]	; (8002f44 <ESP8266_Init+0xa4>)
 8002f1a:	4807      	ldr	r0, [pc, #28]	; (8002f38 <ESP8266_Init+0x98>)
 8002f1c:	f7ff ff6c 	bl	8002df8 <FindStr>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <ESP8266_Init+0x8a>
	{
			return 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <ESP8266_Init+0x8c>
	}
	return 1;                         //Успешно настроен
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40020800 	.word	0x40020800
 8002f34:	200000e0 	.word	0x200000e0
 8002f38:	200001e0 	.word	0x200001e0
 8002f3c:	08005190 	.word	0x08005190
 8002f40:	0800519c 	.word	0x0800519c
 8002f44:	0800518c 	.word	0x0800518c

08002f48 <ESP8266_ConnectAP>:
 * Существуют следующие причины сбоя (связь UART и ESP8266 при нормальных обстоятельствах)
 * 1. Неверное имя Wi-FI и пароль
 * 2. Маршрутизатор подключает слишком много устройств и не может назначить IP-адрес ESP8266
 */
uint8_t ESP8266_ConnectAP(char* ssid,char* pswd)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
	uint8_t cnt=5;
 8002f52:	2305      	movs	r3, #5
 8002f54:	73fb      	strb	r3, [r7, #15]
	while(cnt--)
 8002f56:	e010      	b.n	8002f7a <ESP8266_ConnectAP+0x32>
	{
		memset(usart1_rxbuf,0,sizeof(usart1_rxbuf));
 8002f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4823      	ldr	r0, [pc, #140]	; (8002fec <ESP8266_ConnectAP+0xa4>)
 8002f60:	f000 ff47 	bl	8003df2 <memset>
		ESP8266_ATSendString("AT+CWMODE_CUR=1\r\n");              //Установить в режим СТАНЦИИ
 8002f64:	4822      	ldr	r0, [pc, #136]	; (8002ff0 <ESP8266_ConnectAP+0xa8>)
 8002f66:	f7ff ff13 	bl	8002d90 <ESP8266_ATSendString>
		if(FindStr((char*)usart1_rxbuf,"OK",200) != 0)
 8002f6a:	22c8      	movs	r2, #200	; 0xc8
 8002f6c:	4921      	ldr	r1, [pc, #132]	; (8002ff4 <ESP8266_ConnectAP+0xac>)
 8002f6e:	481f      	ldr	r0, [pc, #124]	; (8002fec <ESP8266_ConnectAP+0xa4>)
 8002f70:	f7ff ff42 	bl	8002df8 <FindStr>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <ESP8266_ConnectAP+0x3e>
	while(cnt--)
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	1e5a      	subs	r2, r3, #1
 8002f7e:	73fa      	strb	r2, [r7, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e9      	bne.n	8002f58 <ESP8266_ConnectAP+0x10>
 8002f84:	e000      	b.n	8002f88 <ESP8266_ConnectAP+0x40>
		{
			break;
 8002f86:	bf00      	nop
		}
	}
	if(cnt == 0)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <ESP8266_ConnectAP+0x4a>
		return 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e028      	b.n	8002fe4 <ESP8266_ConnectAP+0x9c>

	cnt=2;
 8002f92:	2302      	movs	r3, #2
 8002f94:	73fb      	strb	r3, [r7, #15]
	while(cnt--)
 8002f96:	e01f      	b.n	8002fd8 <ESP8266_ConnectAP+0x90>
	{
		memset(usart1_txbuf,0,sizeof(usart1_txbuf));//Очистить буфер отправки
 8002f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4816      	ldr	r0, [pc, #88]	; (8002ff8 <ESP8266_ConnectAP+0xb0>)
 8002fa0:	f000 ff27 	bl	8003df2 <memset>
		memset(usart1_rxbuf,0,sizeof(usart1_rxbuf));//Очистить буфер приема
 8002fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4810      	ldr	r0, [pc, #64]	; (8002fec <ESP8266_ConnectAP+0xa4>)
 8002fac:	f000 ff21 	bl	8003df2 <memset>
		sprintf((char*)usart1_txbuf,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",ssid,pswd);//Подключитесь к целевой точке доступа
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	4911      	ldr	r1, [pc, #68]	; (8002ffc <ESP8266_ConnectAP+0xb4>)
 8002fb6:	4810      	ldr	r0, [pc, #64]	; (8002ff8 <ESP8266_ConnectAP+0xb0>)
 8002fb8:	f001 f83e 	bl	8004038 <siprintf>
		ESP8266_ATSendString((char*)usart1_txbuf);
 8002fbc:	480e      	ldr	r0, [pc, #56]	; (8002ff8 <ESP8266_ConnectAP+0xb0>)
 8002fbe:	f7ff fee7 	bl	8002d90 <ESP8266_ATSendString>
		if(FindStr((char*)usart1_rxbuf,"OK",8000)!=0)                      //Соединение выполнено успешно и присвоено IP-адресу
 8002fc2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002fc6:	490b      	ldr	r1, [pc, #44]	; (8002ff4 <ESP8266_ConnectAP+0xac>)
 8002fc8:	4808      	ldr	r0, [pc, #32]	; (8002fec <ESP8266_ConnectAP+0xa4>)
 8002fca:	f7ff ff15 	bl	8002df8 <FindStr>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <ESP8266_ConnectAP+0x90>
		{
			return 1;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e005      	b.n	8002fe4 <ESP8266_ConnectAP+0x9c>
	while(cnt--)
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	73fa      	strb	r2, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1da      	bne.n	8002f98 <ESP8266_ConnectAP+0x50>
		}
	}
	return 0;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200001e0 	.word	0x200001e0
 8002ff0:	080051b4 	.word	0x080051b4
 8002ff4:	0800518c 	.word	0x0800518c
 8002ff8:	200000e0 	.word	0x200000e0
 8002ffc:	080051c8 	.word	0x080051c8

08003000 <ESP8266_OpenTransmission>:

//Включить режим прозрачной передачи
static uint8_t ESP8266_OpenTransmission(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
	//Установить прозрачный режим передачи
	uint8_t cnt=2;
 8003006:	2302      	movs	r3, #2
 8003008:	71fb      	strb	r3, [r7, #7]
	while(cnt--)
 800300a:	e012      	b.n	8003032 <ESP8266_OpenTransmission+0x32>
	{
		memset(usart1_rxbuf,0,sizeof(usart1_rxbuf));
 800300c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003010:	2100      	movs	r1, #0
 8003012:	480d      	ldr	r0, [pc, #52]	; (8003048 <ESP8266_OpenTransmission+0x48>)
 8003014:	f000 feed 	bl	8003df2 <memset>
		ESP8266_ATSendString("AT+CIPMODE=1\r\n");
 8003018:	480c      	ldr	r0, [pc, #48]	; (800304c <ESP8266_OpenTransmission+0x4c>)
 800301a:	f7ff feb9 	bl	8002d90 <ESP8266_ATSendString>
		if(FindStr((char*)usart1_rxbuf,"OK",200)!=0)
 800301e:	22c8      	movs	r2, #200	; 0xc8
 8003020:	490b      	ldr	r1, [pc, #44]	; (8003050 <ESP8266_OpenTransmission+0x50>)
 8003022:	4809      	ldr	r0, [pc, #36]	; (8003048 <ESP8266_OpenTransmission+0x48>)
 8003024:	f7ff fee8 	bl	8002df8 <FindStr>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <ESP8266_OpenTransmission+0x32>
		{
			return 1;
 800302e:	2301      	movs	r3, #1
 8003030:	e005      	b.n	800303e <ESP8266_OpenTransmission+0x3e>
	while(cnt--)
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	1e5a      	subs	r2, r3, #1
 8003036:	71fa      	strb	r2, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e7      	bne.n	800300c <ESP8266_OpenTransmission+0xc>
		}
	}
	return 0;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200001e0 	.word	0x200001e0
 800304c:	080051e4 	.word	0x080051e4
 8003050:	0800518c 	.word	0x0800518c

08003054 <ESP8266_ConnectServer>:
 * 1. Неверны IP-адрес и номер порта удаленного сервера
 * 2. Не подключен к точке доступа
 * 3. Добавление на стороне сервера запрещено (как правило, этого не происходит)
 */
uint8_t ESP8266_ConnectServer(char* mode,char* ip,uint16_t port)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt;

	ESP8266_ExitUnvarnishedTrans();                   //Для выхода из прозрачной передачи требуется несколько подключений
 8003062:	f7ff feb7 	bl	8002dd4 <ESP8266_ExitUnvarnishedTrans>
	HAL_Delay(500);
 8003066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800306a:	f7fd fe23 	bl	8000cb4 <HAL_Delay>

	//Подключиться к серверу
	cnt=2;
 800306e:	2302      	movs	r3, #2
 8003070:	75fb      	strb	r3, [r7, #23]
	while(cnt--)
 8003072:	e01f      	b.n	80030b4 <ESP8266_ConnectServer+0x60>
	{
		memset(usart1_txbuf,0,sizeof(usart1_txbuf));//Очистить буфер отправки
 8003074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003078:	2100      	movs	r1, #0
 800307a:	4828      	ldr	r0, [pc, #160]	; (800311c <ESP8266_ConnectServer+0xc8>)
 800307c:	f000 feb9 	bl	8003df2 <memset>
		memset(usart1_rxbuf,0,sizeof(usart1_rxbuf));//Очистить буфер приема
 8003080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003084:	2100      	movs	r1, #0
 8003086:	4826      	ldr	r0, [pc, #152]	; (8003120 <ESP8266_ConnectServer+0xcc>)
 8003088:	f000 feb3 	bl	8003df2 <memset>
		sprintf((char*)usart1_txbuf,"AT+CIPSTART=\"%s\",\"%s\",%d\r\n",mode,ip,port);
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4923      	ldr	r1, [pc, #140]	; (8003124 <ESP8266_ConnectServer+0xd0>)
 8003096:	4821      	ldr	r0, [pc, #132]	; (800311c <ESP8266_ConnectServer+0xc8>)
 8003098:	f000 ffce 	bl	8004038 <siprintf>
		ESP8266_ATSendString((char*)usart1_txbuf);
 800309c:	481f      	ldr	r0, [pc, #124]	; (800311c <ESP8266_ConnectServer+0xc8>)
 800309e:	f7ff fe77 	bl	8002d90 <ESP8266_ATSendString>
		if(FindStr((char*)usart1_rxbuf,"CONNECT",8000) !=0 )
 80030a2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80030a6:	4920      	ldr	r1, [pc, #128]	; (8003128 <ESP8266_ConnectServer+0xd4>)
 80030a8:	481d      	ldr	r0, [pc, #116]	; (8003120 <ESP8266_ConnectServer+0xcc>)
 80030aa:	f7ff fea5 	bl	8002df8 <FindStr>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <ESP8266_ConnectServer+0x6c>
	while(cnt--)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	1e5a      	subs	r2, r3, #1
 80030b8:	75fa      	strb	r2, [r7, #23]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1da      	bne.n	8003074 <ESP8266_ConnectServer+0x20>
 80030be:	e000      	b.n	80030c2 <ESP8266_ConnectServer+0x6e>
		{
			break;
 80030c0:	bf00      	nop
		}
	}
	if(cnt == 0)
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <ESP8266_ConnectServer+0x78>
		return 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e022      	b.n	8003112 <ESP8266_ConnectServer+0xbe>

	//Установить прозрачный режим передачи
	if(ESP8266_OpenTransmission()==0) return 0;
 80030cc:	f7ff ff98 	bl	8003000 <ESP8266_OpenTransmission>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <ESP8266_ConnectServer+0x86>
 80030d6:	2300      	movs	r3, #0
 80030d8:	e01b      	b.n	8003112 <ESP8266_ConnectServer+0xbe>

	//Включить статус отправки
	cnt=2;
 80030da:	2302      	movs	r3, #2
 80030dc:	75fb      	strb	r3, [r7, #23]
	while(cnt--)
 80030de:	e012      	b.n	8003106 <ESP8266_ConnectServer+0xb2>
	{
		memset(usart1_rxbuf,0,sizeof(usart1_rxbuf)); //Очистить буфер приема
 80030e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e4:	2100      	movs	r1, #0
 80030e6:	480e      	ldr	r0, [pc, #56]	; (8003120 <ESP8266_ConnectServer+0xcc>)
 80030e8:	f000 fe83 	bl	8003df2 <memset>
		ESP8266_ATSendString("AT+CIPSEND\r\n");//Начать находиться в состоянии прозрачной передачи
 80030ec:	480f      	ldr	r0, [pc, #60]	; (800312c <ESP8266_ConnectServer+0xd8>)
 80030ee:	f7ff fe4f 	bl	8002d90 <ESP8266_ATSendString>
		if(FindStr((char*)usart1_rxbuf,">",200)!=0)
 80030f2:	22c8      	movs	r2, #200	; 0xc8
 80030f4:	490e      	ldr	r1, [pc, #56]	; (8003130 <ESP8266_ConnectServer+0xdc>)
 80030f6:	480a      	ldr	r0, [pc, #40]	; (8003120 <ESP8266_ConnectServer+0xcc>)
 80030f8:	f7ff fe7e 	bl	8002df8 <FindStr>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <ESP8266_ConnectServer+0xb2>
		{
			return 1;
 8003102:	2301      	movs	r3, #1
 8003104:	e005      	b.n	8003112 <ESP8266_ConnectServer+0xbe>
	while(cnt--)
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	1e5a      	subs	r2, r3, #1
 800310a:	75fa      	strb	r2, [r7, #23]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e7      	bne.n	80030e0 <ESP8266_ConnectServer+0x8c>
		}
	}
	return 0;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200000e0 	.word	0x200000e0
 8003120:	200001e0 	.word	0x200001e0
 8003124:	080051f4 	.word	0x080051f4
 8003128:	08005210 	.word	0x08005210
 800312c:	08005218 	.word	0x08005218
 8003130:	08005228 	.word	0x08005228

08003134 <MQTT_SendBuf>:

volatile uint16_t MQTT_TxLen;

//MQTT отправляет данные
void MQTT_SendBuf(uint8_t *buf,uint16_t len)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
	ESP8266_ATSendBuf(buf,len);
 8003140:	887b      	ldrh	r3, [r7, #2]
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fe03 	bl	8002d50 <ESP8266_ATSendBuf>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <MQTT_Connect>:
	MQTT_Disconnect();HAL_Delay(100);
}

//Функция упаковки для сервера подключения MQTT
uint8_t MQTT_Connect(char *ClientID,char *Username,char *Password)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
	int ClientIDLen = strlen(ClientID);
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7fd f835 	bl	80001d0 <strlen>
 8003166:	4603      	mov	r3, r0
 8003168:	61fb      	str	r3, [r7, #28]
	int UsernameLen = strlen(Username);
 800316a:	68b8      	ldr	r0, [r7, #8]
 800316c:	f7fd f830 	bl	80001d0 <strlen>
 8003170:	4603      	mov	r3, r0
 8003172:	61bb      	str	r3, [r7, #24]
	int PasswordLen = strlen(Password);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd f82b 	bl	80001d0 <strlen>
 800317a:	4603      	mov	r3, r0
 800317c:	617b      	str	r3, [r7, #20]
	int DataLen;
	MQTT_TxLen=0;
 800317e:	4b9d      	ldr	r3, [pc, #628]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003180:	2200      	movs	r2, #0
 8003182:	801a      	strh	r2, [r3, #0]
	//Заголовок переменной + полезная нагрузка Каждое поле содержит идентификатор длиной в два байта
  DataLen = 10 + (ClientIDLen+2) + (UsernameLen+2) + (PasswordLen+2);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f103 020c 	add.w	r2, r3, #12
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3302      	adds	r3, #2
 800318e:	441a      	add	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	3302      	adds	r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	627b      	str	r3, [r7, #36]	; 0x24

  //Фиксированный заголовок
   //Тип управляющего сообщения
  usart1_txbuf[MQTT_TxLen++] = 0x10;		//Тип сообщения MQTT ПОДКЛЮЧИТЬСЯ
 8003198:	4b96      	ldr	r3, [pc, #600]	; (80033f4 <MQTT_Connect+0x2a0>)
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	b291      	uxth	r1, r2
 80031a2:	4a94      	ldr	r2, [pc, #592]	; (80033f4 <MQTT_Connect+0x2a0>)
 80031a4:	8011      	strh	r1, [r2, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b93      	ldr	r3, [pc, #588]	; (80033f8 <MQTT_Connect+0x2a4>)
 80031aa:	2110      	movs	r1, #16
 80031ac:	5499      	strb	r1, [r3, r2]
  //Оставшаяся длина (без учета фиксированной головки)
	do
	{
		uint8_t encodedByte = DataLen % 128;
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	425a      	negs	r2, r3
 80031b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031ba:	bf58      	it	pl
 80031bc:	4253      	negpl	r3, r2
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		DataLen = DataLen / 128;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	da00      	bge.n	80031ca <MQTT_Connect+0x76>
 80031c8:	337f      	adds	r3, #127	; 0x7f
 80031ca:	11db      	asrs	r3, r3, #7
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
		// если для кодирования требуется больше данных, установите верхний бит этого байта
		if ( DataLen > 0 )
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dd05      	ble.n	80031e0 <MQTT_Connect+0x8c>
			encodedByte = encodedByte | 128;
 80031d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		usart1_txbuf[MQTT_TxLen++] = encodedByte;
 80031e0:	4b84      	ldr	r3, [pc, #528]	; (80033f4 <MQTT_Connect+0x2a0>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	b291      	uxth	r1, r2
 80031ea:	4a82      	ldr	r2, [pc, #520]	; (80033f4 <MQTT_Connect+0x2a0>)
 80031ec:	8011      	strh	r1, [r2, #0]
 80031ee:	4619      	mov	r1, r3
 80031f0:	4a81      	ldr	r2, [pc, #516]	; (80033f8 <MQTT_Connect+0x2a4>)
 80031f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031f6:	5453      	strb	r3, [r2, r1]
	}while ( DataLen > 0 );
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	dcd7      	bgt.n	80031ae <MQTT_Connect+0x5a>

	//Заголовок переменной
	 //Имя протокола
	usart1_txbuf[MQTT_TxLen++] = 0;        		// Protocol Name Length MSB
 80031fe:	4b7d      	ldr	r3, [pc, #500]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	b291      	uxth	r1, r2
 8003208:	4a7a      	ldr	r2, [pc, #488]	; (80033f4 <MQTT_Connect+0x2a0>)
 800320a:	8011      	strh	r1, [r2, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	4b7a      	ldr	r3, [pc, #488]	; (80033f8 <MQTT_Connect+0x2a4>)
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]
	usart1_txbuf[MQTT_TxLen++] = 4;        		// Protocol Name Length LSB
 8003214:	4b77      	ldr	r3, [pc, #476]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	b291      	uxth	r1, r2
 800321e:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003220:	8011      	strh	r1, [r2, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	4b74      	ldr	r3, [pc, #464]	; (80033f8 <MQTT_Connect+0x2a4>)
 8003226:	2104      	movs	r1, #4
 8003228:	5499      	strb	r1, [r3, r2]
	usart1_txbuf[MQTT_TxLen++] = 'M';        	// ASCII Code for M
 800322a:	4b72      	ldr	r3, [pc, #456]	; (80033f4 <MQTT_Connect+0x2a0>)
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	b291      	uxth	r1, r2
 8003234:	4a6f      	ldr	r2, [pc, #444]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003236:	8011      	strh	r1, [r2, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <MQTT_Connect+0x2a4>)
 800323c:	214d      	movs	r1, #77	; 0x4d
 800323e:	5499      	strb	r1, [r3, r2]
	usart1_txbuf[MQTT_TxLen++] = 'Q';        	// ASCII Code for Q
 8003240:	4b6c      	ldr	r3, [pc, #432]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	b291      	uxth	r1, r2
 800324a:	4a6a      	ldr	r2, [pc, #424]	; (80033f4 <MQTT_Connect+0x2a0>)
 800324c:	8011      	strh	r1, [r2, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4b69      	ldr	r3, [pc, #420]	; (80033f8 <MQTT_Connect+0x2a4>)
 8003252:	2151      	movs	r1, #81	; 0x51
 8003254:	5499      	strb	r1, [r3, r2]
	usart1_txbuf[MQTT_TxLen++] = 'T';        	// ASCII Code for T
 8003256:	4b67      	ldr	r3, [pc, #412]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	b291      	uxth	r1, r2
 8003260:	4a64      	ldr	r2, [pc, #400]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003262:	8011      	strh	r1, [r2, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	4b64      	ldr	r3, [pc, #400]	; (80033f8 <MQTT_Connect+0x2a4>)
 8003268:	2154      	movs	r1, #84	; 0x54
 800326a:	5499      	strb	r1, [r3, r2]
	usart1_txbuf[MQTT_TxLen++] = 'T';        	// ASCII Code for T
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <MQTT_Connect+0x2a0>)
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	b291      	uxth	r1, r2
 8003276:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003278:	8011      	strh	r1, [r2, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <MQTT_Connect+0x2a4>)
 800327e:	2154      	movs	r1, #84	; 0x54
 8003280:	5499      	strb	r1, [r3, r2]
	//Уровень протокола
	usart1_txbuf[MQTT_TxLen++] = 4;        		// MQTT Protocol version = 4
 8003282:	4b5c      	ldr	r3, [pc, #368]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	b291      	uxth	r1, r2
 800328c:	4a59      	ldr	r2, [pc, #356]	; (80033f4 <MQTT_Connect+0x2a0>)
 800328e:	8011      	strh	r1, [r2, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <MQTT_Connect+0x2a4>)
 8003294:	2104      	movs	r1, #4
 8003296:	5499      	strb	r1, [r3, r2]
	//Флаг подключения
	usart1_txbuf[MQTT_TxLen++] = 0xc2;        	// conn flags
 8003298:	4b56      	ldr	r3, [pc, #344]	; (80033f4 <MQTT_Connect+0x2a0>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	b291      	uxth	r1, r2
 80032a2:	4a54      	ldr	r2, [pc, #336]	; (80033f4 <MQTT_Connect+0x2a0>)
 80032a4:	8011      	strh	r1, [r2, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <MQTT_Connect+0x2a4>)
 80032aa:	21c2      	movs	r1, #194	; 0xc2
 80032ac:	5499      	strb	r1, [r3, r2]
	usart1_txbuf[MQTT_TxLen++] = 0;        		// Keep-alive Time Length MSB
 80032ae:	4b51      	ldr	r3, [pc, #324]	; (80033f4 <MQTT_Connect+0x2a0>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	b291      	uxth	r1, r2
 80032b8:	4a4e      	ldr	r2, [pc, #312]	; (80033f4 <MQTT_Connect+0x2a0>)
 80032ba:	8011      	strh	r1, [r2, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	4b4e      	ldr	r3, [pc, #312]	; (80033f8 <MQTT_Connect+0x2a4>)
 80032c0:	2100      	movs	r1, #0
 80032c2:	5499      	strb	r1, [r3, r2]
	usart1_txbuf[MQTT_TxLen++] = 60;        	// Keep-alive Time Length LSB  60S心跳包
 80032c4:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <MQTT_Connect+0x2a0>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	b291      	uxth	r1, r2
 80032ce:	4a49      	ldr	r2, [pc, #292]	; (80033f4 <MQTT_Connect+0x2a0>)
 80032d0:	8011      	strh	r1, [r2, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <MQTT_Connect+0x2a4>)
 80032d6:	213c      	movs	r1, #60	; 0x3c
 80032d8:	5499      	strb	r1, [r3, r2]

	usart1_txbuf[MQTT_TxLen++] = BYTE1(ClientIDLen);// Client ID length MSB
 80032da:	f107 031c 	add.w	r3, r7, #28
 80032de:	3301      	adds	r3, #1
 80032e0:	4a44      	ldr	r2, [pc, #272]	; (80033f4 <MQTT_Connect+0x2a0>)
 80032e2:	8812      	ldrh	r2, [r2, #0]
 80032e4:	b292      	uxth	r2, r2
 80032e6:	1c51      	adds	r1, r2, #1
 80032e8:	b288      	uxth	r0, r1
 80032ea:	4942      	ldr	r1, [pc, #264]	; (80033f4 <MQTT_Connect+0x2a0>)
 80032ec:	8008      	strh	r0, [r1, #0]
 80032ee:	7819      	ldrb	r1, [r3, #0]
 80032f0:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <MQTT_Connect+0x2a4>)
 80032f2:	5499      	strb	r1, [r3, r2]
	usart1_txbuf[MQTT_TxLen++] = BYTE0(ClientIDLen);// Client ID length LSB
 80032f4:	f107 021c 	add.w	r2, r7, #28
 80032f8:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <MQTT_Connect+0x2a0>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	b288      	uxth	r0, r1
 8003302:	493c      	ldr	r1, [pc, #240]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003304:	8008      	strh	r0, [r1, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	7812      	ldrb	r2, [r2, #0]
 800330a:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <MQTT_Connect+0x2a4>)
 800330c:	545a      	strb	r2, [r3, r1]
	memcpy(&usart1_txbuf[MQTT_TxLen],ClientID,ClientIDLen);
 800330e:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <MQTT_Connect+0x2a4>)
 8003318:	4413      	add	r3, r2
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fd59 	bl	8003dd6 <memcpy>
	MQTT_TxLen += ClientIDLen;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	b29a      	uxth	r2, r3
 8003328:	4b32      	ldr	r3, [pc, #200]	; (80033f4 <MQTT_Connect+0x2a0>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	4413      	add	r3, r2
 8003330:	b29a      	uxth	r2, r3
 8003332:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003334:	801a      	strh	r2, [r3, #0]

	if(UsernameLen > 0)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	dd2d      	ble.n	8003398 <MQTT_Connect+0x244>
	{
		usart1_txbuf[MQTT_TxLen++] = BYTE1(UsernameLen);		//username length MSB
 800333c:	f107 0318 	add.w	r3, r7, #24
 8003340:	3301      	adds	r3, #1
 8003342:	4a2c      	ldr	r2, [pc, #176]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003344:	8812      	ldrh	r2, [r2, #0]
 8003346:	b292      	uxth	r2, r2
 8003348:	1c51      	adds	r1, r2, #1
 800334a:	b288      	uxth	r0, r1
 800334c:	4929      	ldr	r1, [pc, #164]	; (80033f4 <MQTT_Connect+0x2a0>)
 800334e:	8008      	strh	r0, [r1, #0]
 8003350:	7819      	ldrb	r1, [r3, #0]
 8003352:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <MQTT_Connect+0x2a4>)
 8003354:	5499      	strb	r1, [r3, r2]
		usart1_txbuf[MQTT_TxLen++] = BYTE0(UsernameLen);    	//username length LSB
 8003356:	f107 0218 	add.w	r2, r7, #24
 800335a:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <MQTT_Connect+0x2a0>)
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	1c59      	adds	r1, r3, #1
 8003362:	b288      	uxth	r0, r1
 8003364:	4923      	ldr	r1, [pc, #140]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003366:	8008      	strh	r0, [r1, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <MQTT_Connect+0x2a4>)
 800336e:	545a      	strb	r2, [r3, r1]
		memcpy(&usart1_txbuf[MQTT_TxLen],Username,UsernameLen);
 8003370:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <MQTT_Connect+0x2a4>)
 800337a:	4413      	add	r3, r2
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fd28 	bl	8003dd6 <memcpy>
		MQTT_TxLen += UsernameLen;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	b29a      	uxth	r2, r3
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <MQTT_Connect+0x2a0>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4413      	add	r3, r2
 8003392:	b29a      	uxth	r2, r3
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <MQTT_Connect+0x2a0>)
 8003396:	801a      	strh	r2, [r3, #0]
	}

	if(PasswordLen > 0)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	dd33      	ble.n	8003406 <MQTT_Connect+0x2b2>
	{
		usart1_txbuf[MQTT_TxLen++] = BYTE1(PasswordLen);		//password length MSB
 800339e:	f107 0314 	add.w	r3, r7, #20
 80033a2:	3301      	adds	r3, #1
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <MQTT_Connect+0x2a0>)
 80033a6:	8812      	ldrh	r2, [r2, #0]
 80033a8:	b292      	uxth	r2, r2
 80033aa:	1c51      	adds	r1, r2, #1
 80033ac:	b288      	uxth	r0, r1
 80033ae:	4911      	ldr	r1, [pc, #68]	; (80033f4 <MQTT_Connect+0x2a0>)
 80033b0:	8008      	strh	r0, [r1, #0]
 80033b2:	7819      	ldrb	r1, [r3, #0]
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <MQTT_Connect+0x2a4>)
 80033b6:	5499      	strb	r1, [r3, r2]
		usart1_txbuf[MQTT_TxLen++] = BYTE0(PasswordLen);    	//password length LSB
 80033b8:	f107 0214 	add.w	r2, r7, #20
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <MQTT_Connect+0x2a0>)
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	1c59      	adds	r1, r3, #1
 80033c4:	b288      	uxth	r0, r1
 80033c6:	490b      	ldr	r1, [pc, #44]	; (80033f4 <MQTT_Connect+0x2a0>)
 80033c8:	8008      	strh	r0, [r1, #0]
 80033ca:	4619      	mov	r1, r3
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <MQTT_Connect+0x2a4>)
 80033d0:	545a      	strb	r2, [r3, r1]
		memcpy(&usart1_txbuf[MQTT_TxLen],Password,PasswordLen);
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <MQTT_Connect+0x2a0>)
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <MQTT_Connect+0x2a4>)
 80033dc:	4413      	add	r3, r2
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fcf7 	bl	8003dd6 <memcpy>
		MQTT_TxLen += PasswordLen;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	4b01      	ldr	r3, [pc, #4]	; (80033f4 <MQTT_Connect+0x2a0>)
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	e004      	b.n	80033fc <MQTT_Connect+0x2a8>
 80033f2:	bf00      	nop
 80033f4:	200003e2 	.word	0x200003e2
 80033f8:	200000e0 	.word	0x200000e0
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	4413      	add	r3, r2
 8003400:	b29a      	uxth	r2, r3
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <MQTT_Connect+0x320>)
 8003404:	801a      	strh	r2, [r3, #0]
	}

	uint8_t cnt=2;
 8003406:	2302      	movs	r3, #2
 8003408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t wait;
	while(cnt--)
 800340c:	e026      	b.n	800345c <MQTT_Connect+0x308>
	{
		memset(usart1_rxbuf,0,sizeof(usart1_rxbuf));
 800340e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003412:	2100      	movs	r1, #0
 8003414:	4818      	ldr	r0, [pc, #96]	; (8003478 <MQTT_Connect+0x324>)
 8003416:	f000 fcec 	bl	8003df2 <memset>
		MQTT_SendBuf(usart1_txbuf,MQTT_TxLen);
 800341a:	4b16      	ldr	r3, [pc, #88]	; (8003474 <MQTT_Connect+0x320>)
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	4619      	mov	r1, r3
 8003422:	4816      	ldr	r0, [pc, #88]	; (800347c <MQTT_Connect+0x328>)
 8003424:	f7ff fe86 	bl	8003134 <MQTT_SendBuf>
		wait=30;//Подождите 3 секунды
 8003428:	231e      	movs	r3, #30
 800342a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		while(wait--)
 800342e:	e00e      	b.n	800344e <MQTT_Connect+0x2fa>
		{
			//CONNECT
			if(usart1_rxbuf[0]==parket_connetAck[0] && usart1_rxbuf[1]==parket_connetAck[1]) //Успешное подключение
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <MQTT_Connect+0x324>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2220      	movs	r2, #32
 8003436:	4293      	cmp	r3, r2
 8003438:	d106      	bne.n	8003448 <MQTT_Connect+0x2f4>
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <MQTT_Connect+0x324>)
 800343c:	785b      	ldrb	r3, [r3, #1]
 800343e:	2202      	movs	r2, #2
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <MQTT_Connect+0x2f4>
			{
				return 1;//Соединение успешно
 8003444:	2301      	movs	r3, #1
 8003446:	e011      	b.n	800346c <MQTT_Connect+0x318>
			}
			HAL_Delay(100);
 8003448:	2064      	movs	r0, #100	; 0x64
 800344a:	f7fd fc33 	bl	8000cb4 <HAL_Delay>
		while(wait--)
 800344e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003452:	1e5a      	subs	r2, r3, #1
 8003454:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e9      	bne.n	8003430 <MQTT_Connect+0x2dc>
	while(cnt--)
 800345c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003460:	1e5a      	subs	r2, r3, #1
 8003462:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1d1      	bne.n	800340e <MQTT_Connect+0x2ba>
		}
	}
	return 0;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3728      	adds	r7, #40	; 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	200003e2 	.word	0x200003e2
 8003478:	200001e0 	.word	0x200001e0
 800347c:	200000e0 	.word	0x200000e0

08003480 <MQTT_SubscribeTopic>:
//Функция упаковки данных подписки MQTT/отмены подписки
//тема тема
//уровень сообщения qos
//следует ли подписаться/отказаться от пакета запросов на подписку
uint8_t MQTT_SubscribeTopic(char *topic,uint8_t qos,uint8_t whether)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]
 800348c:	4613      	mov	r3, r2
 800348e:	70bb      	strb	r3, [r7, #2]
	MQTT_TxLen=0;
 8003490:	4b6b      	ldr	r3, [pc, #428]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 8003492:	2200      	movs	r2, #0
 8003494:	801a      	strh	r2, [r3, #0]
	int topiclen = strlen(topic);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fc fe9a 	bl	80001d0 <strlen>
 800349c:	4603      	mov	r3, r0
 800349e:	60fb      	str	r3, [r7, #12]

	int DataLen = 2 + (topiclen+2) + (whether?1:0);//Длина заголовка переменной (2 байта) плюс длина полезной нагрузки
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3304      	adds	r3, #4
 80034a4:	78ba      	ldrb	r2, [r7, #2]
 80034a6:	2a00      	cmp	r2, #0
 80034a8:	bf14      	ite	ne
 80034aa:	2201      	movne	r2, #1
 80034ac:	2200      	moveq	r2, #0
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	4413      	add	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
	//Фиксированный заголовок
	 //Тип управляющего сообщения
	if(whether) usart1_txbuf[MQTT_TxLen++] = 0x82; //Тип сообщения и подписка на логотип
 80034b4:	78bb      	ldrb	r3, [r7, #2]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <MQTT_SubscribeTopic+0x52>
 80034ba:	4b61      	ldr	r3, [pc, #388]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	b291      	uxth	r1, r2
 80034c4:	4a5e      	ldr	r2, [pc, #376]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 80034c6:	8011      	strh	r1, [r2, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b5e      	ldr	r3, [pc, #376]	; (8003644 <MQTT_SubscribeTopic+0x1c4>)
 80034cc:	2182      	movs	r1, #130	; 0x82
 80034ce:	5499      	strb	r1, [r3, r2]
 80034d0:	e00a      	b.n	80034e8 <MQTT_SubscribeTopic+0x68>
	else	usart1_txbuf[MQTT_TxLen++] = 0xA2;    //Отказаться от подписки
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	b291      	uxth	r1, r2
 80034dc:	4a58      	ldr	r2, [pc, #352]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 80034de:	8011      	strh	r1, [r2, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b58      	ldr	r3, [pc, #352]	; (8003644 <MQTT_SubscribeTopic+0x1c4>)
 80034e4:	21a2      	movs	r1, #162	; 0xa2
 80034e6:	5499      	strb	r1, [r3, r2]

	//Оставшаяся длина
	do
	{
		uint8_t encodedByte = DataLen % 128;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	425a      	negs	r2, r3
 80034ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034f4:	bf58      	it	pl
 80034f6:	4253      	negpl	r3, r2
 80034f8:	74fb      	strb	r3, [r7, #19]
		DataLen = DataLen / 128;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da00      	bge.n	8003502 <MQTT_SubscribeTopic+0x82>
 8003500:	337f      	adds	r3, #127	; 0x7f
 8003502:	11db      	asrs	r3, r3, #7
 8003504:	617b      	str	r3, [r7, #20]
		// если для кодирования требуется больше данных, установите верхний бит этого байта
		if ( DataLen > 0 )
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	dd03      	ble.n	8003514 <MQTT_SubscribeTopic+0x94>
			encodedByte = encodedByte | 128;
 800350c:	7cfb      	ldrb	r3, [r7, #19]
 800350e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003512:	74fb      	strb	r3, [r7, #19]
		usart1_txbuf[MQTT_TxLen++] = encodedByte;
 8003514:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	b291      	uxth	r1, r2
 800351e:	4a48      	ldr	r2, [pc, #288]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 8003520:	8011      	strh	r1, [r2, #0]
 8003522:	4619      	mov	r1, r3
 8003524:	4a47      	ldr	r2, [pc, #284]	; (8003644 <MQTT_SubscribeTopic+0x1c4>)
 8003526:	7cfb      	ldrb	r3, [r7, #19]
 8003528:	5453      	strb	r3, [r2, r1]
	}while ( DataLen > 0 );
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	dcdb      	bgt.n	80034e8 <MQTT_SubscribeTopic+0x68>

	//Заголовок переменной
	usart1_txbuf[MQTT_TxLen++] = 0;				//Идентификатор сообщения MSB
 8003530:	4b43      	ldr	r3, [pc, #268]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	b291      	uxth	r1, r2
 800353a:	4a41      	ldr	r2, [pc, #260]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 800353c:	8011      	strh	r1, [r2, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	4b40      	ldr	r3, [pc, #256]	; (8003644 <MQTT_SubscribeTopic+0x1c4>)
 8003542:	2100      	movs	r1, #0
 8003544:	5499      	strb	r1, [r3, r2]
	usart1_txbuf[MQTT_TxLen++] = 0x01;           //Идентификатор сообщения LSB
 8003546:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	b291      	uxth	r1, r2
 8003550:	4a3b      	ldr	r2, [pc, #236]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 8003552:	8011      	strh	r1, [r2, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <MQTT_SubscribeTopic+0x1c4>)
 8003558:	2101      	movs	r1, #1
 800355a:	5499      	strb	r1, [r3, r2]
	//Полезные нагрузки
	usart1_txbuf[MQTT_TxLen++] = BYTE1(topiclen);//Длина темы MSB
 800355c:	f107 030c 	add.w	r3, r7, #12
 8003560:	3301      	adds	r3, #1
 8003562:	4a37      	ldr	r2, [pc, #220]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 8003564:	8812      	ldrh	r2, [r2, #0]
 8003566:	b292      	uxth	r2, r2
 8003568:	1c51      	adds	r1, r2, #1
 800356a:	b288      	uxth	r0, r1
 800356c:	4934      	ldr	r1, [pc, #208]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 800356e:	8008      	strh	r0, [r1, #0]
 8003570:	7819      	ldrb	r1, [r3, #0]
 8003572:	4b34      	ldr	r3, [pc, #208]	; (8003644 <MQTT_SubscribeTopic+0x1c4>)
 8003574:	5499      	strb	r1, [r3, r2]
	usart1_txbuf[MQTT_TxLen++] = BYTE0(topiclen);//Длина темы LSB
 8003576:	f107 020c 	add.w	r2, r7, #12
 800357a:	4b31      	ldr	r3, [pc, #196]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	1c59      	adds	r1, r3, #1
 8003582:	b288      	uxth	r0, r1
 8003584:	492e      	ldr	r1, [pc, #184]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 8003586:	8008      	strh	r0, [r1, #0]
 8003588:	4619      	mov	r1, r3
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <MQTT_SubscribeTopic+0x1c4>)
 800358e:	545a      	strb	r2, [r3, r1]
	memcpy(&usart1_txbuf[MQTT_TxLen],topic,topiclen);
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <MQTT_SubscribeTopic+0x1c4>)
 800359a:	4413      	add	r3, r2
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fc18 	bl	8003dd6 <memcpy>
	MQTT_TxLen += topiclen;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	4b25      	ldr	r3, [pc, #148]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 80035b6:	801a      	strh	r2, [r3, #0]

	if(whether)
 80035b8:	78bb      	ldrb	r3, [r7, #2]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <MQTT_SubscribeTopic+0x154>
	{
		usart1_txbuf[MQTT_TxLen++] = qos;//Уровень QoS
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	b291      	uxth	r1, r2
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 80035ca:	8011      	strh	r1, [r2, #0]
 80035cc:	4619      	mov	r1, r3
 80035ce:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <MQTT_SubscribeTopic+0x1c4>)
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	5453      	strb	r3, [r2, r1]
	}

	uint8_t cnt=2;
 80035d4:	2302      	movs	r3, #2
 80035d6:	74bb      	strb	r3, [r7, #18]
	uint8_t wait;
	while(cnt--)
 80035d8:	e023      	b.n	8003622 <MQTT_SubscribeTopic+0x1a2>
	{
		memset(usart1_rxbuf,0,sizeof(usart1_rxbuf));
 80035da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035de:	2100      	movs	r1, #0
 80035e0:	4819      	ldr	r0, [pc, #100]	; (8003648 <MQTT_SubscribeTopic+0x1c8>)
 80035e2:	f000 fc06 	bl	8003df2 <memset>
		MQTT_SendBuf(usart1_txbuf,MQTT_TxLen);
 80035e6:	4b16      	ldr	r3, [pc, #88]	; (8003640 <MQTT_SubscribeTopic+0x1c0>)
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4619      	mov	r1, r3
 80035ee:	4815      	ldr	r0, [pc, #84]	; (8003644 <MQTT_SubscribeTopic+0x1c4>)
 80035f0:	f7ff fda0 	bl	8003134 <MQTT_SendBuf>
		wait=30;//Подождите 3 секунды
 80035f4:	231e      	movs	r3, #30
 80035f6:	747b      	strb	r3, [r7, #17]
		while(wait--)
 80035f8:	e00e      	b.n	8003618 <MQTT_SubscribeTopic+0x198>
		{
			if(usart1_rxbuf[0]==parket_subAck[0] && usart1_rxbuf[1]==parket_subAck[1]) //Подписался успешно
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <MQTT_SubscribeTopic+0x1c8>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2290      	movs	r2, #144	; 0x90
 8003600:	4293      	cmp	r3, r2
 8003602:	d106      	bne.n	8003612 <MQTT_SubscribeTopic+0x192>
 8003604:	4b10      	ldr	r3, [pc, #64]	; (8003648 <MQTT_SubscribeTopic+0x1c8>)
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	2203      	movs	r2, #3
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <MQTT_SubscribeTopic+0x192>
			{
				return 1;//Успешно подписан
 800360e:	2301      	movs	r3, #1
 8003610:	e012      	b.n	8003638 <MQTT_SubscribeTopic+0x1b8>
			}
			HAL_Delay(100);
 8003612:	2064      	movs	r0, #100	; 0x64
 8003614:	f7fd fb4e 	bl	8000cb4 <HAL_Delay>
		while(wait--)
 8003618:	7c7b      	ldrb	r3, [r7, #17]
 800361a:	1e5a      	subs	r2, r3, #1
 800361c:	747a      	strb	r2, [r7, #17]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1eb      	bne.n	80035fa <MQTT_SubscribeTopic+0x17a>
	while(cnt--)
 8003622:	7cbb      	ldrb	r3, [r7, #18]
 8003624:	1e5a      	subs	r2, r3, #1
 8003626:	74ba      	strb	r2, [r7, #18]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1d6      	bne.n	80035da <MQTT_SubscribeTopic+0x15a>
		}
	}
	if(cnt) return 1;	//Успешно подписан
 800362c:	7cbb      	ldrb	r3, [r7, #18]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MQTT_SubscribeTopic+0x1b6>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <MQTT_SubscribeTopic+0x1b8>
	return 0;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	200003e2 	.word	0x200003e2
 8003644:	200000e0 	.word	0x200000e0
 8003648:	200001e0 	.word	0x200001e0

0800364c <findslot>:
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <findslot+0x2c>)
 800364e:	b510      	push	{r4, lr}
 8003650:	4604      	mov	r4, r0
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	b118      	cbz	r0, 800365e <findslot+0x12>
 8003656:	6983      	ldr	r3, [r0, #24]
 8003658:	b90b      	cbnz	r3, 800365e <findslot+0x12>
 800365a:	f000 faf7 	bl	8003c4c <__sinit>
 800365e:	2c13      	cmp	r4, #19
 8003660:	d807      	bhi.n	8003672 <findslot+0x26>
 8003662:	4806      	ldr	r0, [pc, #24]	; (800367c <findslot+0x30>)
 8003664:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003668:	3201      	adds	r2, #1
 800366a:	d002      	beq.n	8003672 <findslot+0x26>
 800366c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003670:	bd10      	pop	{r4, pc}
 8003672:	2000      	movs	r0, #0
 8003674:	e7fc      	b.n	8003670 <findslot+0x24>
 8003676:	bf00      	nop
 8003678:	20000014 	.word	0x20000014
 800367c:	200003f0 	.word	0x200003f0

08003680 <error>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	4604      	mov	r4, r0
 8003684:	f000 fa84 	bl	8003b90 <__errno>
 8003688:	2613      	movs	r6, #19
 800368a:	4605      	mov	r5, r0
 800368c:	2700      	movs	r7, #0
 800368e:	4630      	mov	r0, r6
 8003690:	4639      	mov	r1, r7
 8003692:	beab      	bkpt	0x00ab
 8003694:	4606      	mov	r6, r0
 8003696:	602e      	str	r6, [r5, #0]
 8003698:	4620      	mov	r0, r4
 800369a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800369c <checkerror>:
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d101      	bne.n	80036a4 <checkerror+0x8>
 80036a0:	f7ff bfee 	b.w	8003680 <error>
 80036a4:	4770      	bx	lr

080036a6 <_swiread>:
 80036a6:	b530      	push	{r4, r5, lr}
 80036a8:	b085      	sub	sp, #20
 80036aa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80036ae:	9203      	str	r2, [sp, #12]
 80036b0:	2406      	movs	r4, #6
 80036b2:	ad01      	add	r5, sp, #4
 80036b4:	4620      	mov	r0, r4
 80036b6:	4629      	mov	r1, r5
 80036b8:	beab      	bkpt	0x00ab
 80036ba:	4604      	mov	r4, r0
 80036bc:	4620      	mov	r0, r4
 80036be:	f7ff ffed 	bl	800369c <checkerror>
 80036c2:	b005      	add	sp, #20
 80036c4:	bd30      	pop	{r4, r5, pc}

080036c6 <_read>:
 80036c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036c8:	4615      	mov	r5, r2
 80036ca:	9101      	str	r1, [sp, #4]
 80036cc:	f7ff ffbe 	bl	800364c <findslot>
 80036d0:	9901      	ldr	r1, [sp, #4]
 80036d2:	4604      	mov	r4, r0
 80036d4:	b938      	cbnz	r0, 80036e6 <_read+0x20>
 80036d6:	f000 fa5b 	bl	8003b90 <__errno>
 80036da:	2309      	movs	r3, #9
 80036dc:	6003      	str	r3, [r0, #0]
 80036de:	f04f 30ff 	mov.w	r0, #4294967295
 80036e2:	b003      	add	sp, #12
 80036e4:	bd30      	pop	{r4, r5, pc}
 80036e6:	6800      	ldr	r0, [r0, #0]
 80036e8:	462a      	mov	r2, r5
 80036ea:	f7ff ffdc 	bl	80036a6 <_swiread>
 80036ee:	1c43      	adds	r3, r0, #1
 80036f0:	d0f7      	beq.n	80036e2 <_read+0x1c>
 80036f2:	6863      	ldr	r3, [r4, #4]
 80036f4:	1a2a      	subs	r2, r5, r0
 80036f6:	4413      	add	r3, r2
 80036f8:	6063      	str	r3, [r4, #4]
 80036fa:	4610      	mov	r0, r2
 80036fc:	e7f1      	b.n	80036e2 <_read+0x1c>

080036fe <_swilseek>:
 80036fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003700:	460c      	mov	r4, r1
 8003702:	4616      	mov	r6, r2
 8003704:	f7ff ffa2 	bl	800364c <findslot>
 8003708:	4605      	mov	r5, r0
 800370a:	b940      	cbnz	r0, 800371e <_swilseek+0x20>
 800370c:	f000 fa40 	bl	8003b90 <__errno>
 8003710:	2309      	movs	r3, #9
 8003712:	6003      	str	r3, [r0, #0]
 8003714:	f04f 34ff 	mov.w	r4, #4294967295
 8003718:	4620      	mov	r0, r4
 800371a:	b003      	add	sp, #12
 800371c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800371e:	2e02      	cmp	r6, #2
 8003720:	d903      	bls.n	800372a <_swilseek+0x2c>
 8003722:	f000 fa35 	bl	8003b90 <__errno>
 8003726:	2316      	movs	r3, #22
 8003728:	e7f3      	b.n	8003712 <_swilseek+0x14>
 800372a:	2e01      	cmp	r6, #1
 800372c:	d112      	bne.n	8003754 <_swilseek+0x56>
 800372e:	6843      	ldr	r3, [r0, #4]
 8003730:	18e4      	adds	r4, r4, r3
 8003732:	d4f6      	bmi.n	8003722 <_swilseek+0x24>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	260a      	movs	r6, #10
 8003738:	e9cd 3400 	strd	r3, r4, [sp]
 800373c:	466f      	mov	r7, sp
 800373e:	4630      	mov	r0, r6
 8003740:	4639      	mov	r1, r7
 8003742:	beab      	bkpt	0x00ab
 8003744:	4606      	mov	r6, r0
 8003746:	4630      	mov	r0, r6
 8003748:	f7ff ffa8 	bl	800369c <checkerror>
 800374c:	2800      	cmp	r0, #0
 800374e:	dbe1      	blt.n	8003714 <_swilseek+0x16>
 8003750:	606c      	str	r4, [r5, #4]
 8003752:	e7e1      	b.n	8003718 <_swilseek+0x1a>
 8003754:	2e02      	cmp	r6, #2
 8003756:	d1ed      	bne.n	8003734 <_swilseek+0x36>
 8003758:	6803      	ldr	r3, [r0, #0]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	260c      	movs	r6, #12
 800375e:	466f      	mov	r7, sp
 8003760:	4630      	mov	r0, r6
 8003762:	4639      	mov	r1, r7
 8003764:	beab      	bkpt	0x00ab
 8003766:	4606      	mov	r6, r0
 8003768:	4630      	mov	r0, r6
 800376a:	f7ff ff97 	bl	800369c <checkerror>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	d0d0      	beq.n	8003714 <_swilseek+0x16>
 8003772:	4404      	add	r4, r0
 8003774:	e7de      	b.n	8003734 <_swilseek+0x36>

08003776 <_lseek>:
 8003776:	f7ff bfc2 	b.w	80036fe <_swilseek>

0800377a <_swiwrite>:
 800377a:	b530      	push	{r4, r5, lr}
 800377c:	b085      	sub	sp, #20
 800377e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003782:	9203      	str	r2, [sp, #12]
 8003784:	2405      	movs	r4, #5
 8003786:	ad01      	add	r5, sp, #4
 8003788:	4620      	mov	r0, r4
 800378a:	4629      	mov	r1, r5
 800378c:	beab      	bkpt	0x00ab
 800378e:	4604      	mov	r4, r0
 8003790:	4620      	mov	r0, r4
 8003792:	f7ff ff83 	bl	800369c <checkerror>
 8003796:	b005      	add	sp, #20
 8003798:	bd30      	pop	{r4, r5, pc}

0800379a <_write>:
 800379a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800379c:	4615      	mov	r5, r2
 800379e:	9101      	str	r1, [sp, #4]
 80037a0:	f7ff ff54 	bl	800364c <findslot>
 80037a4:	9901      	ldr	r1, [sp, #4]
 80037a6:	4604      	mov	r4, r0
 80037a8:	b930      	cbnz	r0, 80037b8 <_write+0x1e>
 80037aa:	f000 f9f1 	bl	8003b90 <__errno>
 80037ae:	2309      	movs	r3, #9
 80037b0:	6003      	str	r3, [r0, #0]
 80037b2:	f04f 30ff 	mov.w	r0, #4294967295
 80037b6:	e012      	b.n	80037de <_write+0x44>
 80037b8:	6800      	ldr	r0, [r0, #0]
 80037ba:	462a      	mov	r2, r5
 80037bc:	f7ff ffdd 	bl	800377a <_swiwrite>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	dbf6      	blt.n	80037b2 <_write+0x18>
 80037c4:	6862      	ldr	r2, [r4, #4]
 80037c6:	1a2b      	subs	r3, r5, r0
 80037c8:	441a      	add	r2, r3
 80037ca:	42a8      	cmp	r0, r5
 80037cc:	6062      	str	r2, [r4, #4]
 80037ce:	d105      	bne.n	80037dc <_write+0x42>
 80037d0:	2000      	movs	r0, #0
 80037d2:	b003      	add	sp, #12
 80037d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037d8:	f7ff bf52 	b.w	8003680 <error>
 80037dc:	4618      	mov	r0, r3
 80037de:	b003      	add	sp, #12
 80037e0:	bd30      	pop	{r4, r5, pc}

080037e2 <_swiclose>:
 80037e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037e4:	2402      	movs	r4, #2
 80037e6:	9001      	str	r0, [sp, #4]
 80037e8:	ad01      	add	r5, sp, #4
 80037ea:	4620      	mov	r0, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	beab      	bkpt	0x00ab
 80037f0:	4604      	mov	r4, r0
 80037f2:	4620      	mov	r0, r4
 80037f4:	f7ff ff52 	bl	800369c <checkerror>
 80037f8:	b003      	add	sp, #12
 80037fa:	bd30      	pop	{r4, r5, pc}

080037fc <_close>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4605      	mov	r5, r0
 8003800:	f7ff ff24 	bl	800364c <findslot>
 8003804:	4604      	mov	r4, r0
 8003806:	b930      	cbnz	r0, 8003816 <_close+0x1a>
 8003808:	f000 f9c2 	bl	8003b90 <__errno>
 800380c:	2309      	movs	r3, #9
 800380e:	6003      	str	r3, [r0, #0]
 8003810:	f04f 30ff 	mov.w	r0, #4294967295
 8003814:	bd38      	pop	{r3, r4, r5, pc}
 8003816:	3d01      	subs	r5, #1
 8003818:	2d01      	cmp	r5, #1
 800381a:	d809      	bhi.n	8003830 <_close+0x34>
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <_close+0x48>)
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	429a      	cmp	r2, r3
 8003824:	d104      	bne.n	8003830 <_close+0x34>
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	6003      	str	r3, [r0, #0]
 800382c:	2000      	movs	r0, #0
 800382e:	e7f1      	b.n	8003814 <_close+0x18>
 8003830:	6820      	ldr	r0, [r4, #0]
 8003832:	f7ff ffd6 	bl	80037e2 <_swiclose>
 8003836:	2800      	cmp	r0, #0
 8003838:	d1ec      	bne.n	8003814 <_close+0x18>
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	6023      	str	r3, [r4, #0]
 8003840:	e7e8      	b.n	8003814 <_close+0x18>
 8003842:	bf00      	nop
 8003844:	200003f0 	.word	0x200003f0

08003848 <_swistat>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	460c      	mov	r4, r1
 800384c:	f7ff fefe 	bl	800364c <findslot>
 8003850:	4605      	mov	r5, r0
 8003852:	b930      	cbnz	r0, 8003862 <_swistat+0x1a>
 8003854:	f000 f99c 	bl	8003b90 <__errno>
 8003858:	2309      	movs	r3, #9
 800385a:	6003      	str	r3, [r0, #0]
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	bd70      	pop	{r4, r5, r6, pc}
 8003862:	6863      	ldr	r3, [r4, #4]
 8003864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003868:	6063      	str	r3, [r4, #4]
 800386a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800386e:	64a3      	str	r3, [r4, #72]	; 0x48
 8003870:	260c      	movs	r6, #12
 8003872:	4630      	mov	r0, r6
 8003874:	4629      	mov	r1, r5
 8003876:	beab      	bkpt	0x00ab
 8003878:	4605      	mov	r5, r0
 800387a:	4628      	mov	r0, r5
 800387c:	f7ff ff0e 	bl	800369c <checkerror>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	bf1c      	itt	ne
 8003884:	6120      	strne	r0, [r4, #16]
 8003886:	2000      	movne	r0, #0
 8003888:	e7ea      	b.n	8003860 <_swistat+0x18>

0800388a <_fstat>:
 800388a:	460b      	mov	r3, r1
 800388c:	b510      	push	{r4, lr}
 800388e:	2100      	movs	r1, #0
 8003890:	4604      	mov	r4, r0
 8003892:	2258      	movs	r2, #88	; 0x58
 8003894:	4618      	mov	r0, r3
 8003896:	f000 faac 	bl	8003df2 <memset>
 800389a:	4601      	mov	r1, r0
 800389c:	4620      	mov	r0, r4
 800389e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a2:	f7ff bfd1 	b.w	8003848 <_swistat>

080038a6 <_stat>:
 80038a6:	b538      	push	{r3, r4, r5, lr}
 80038a8:	460d      	mov	r5, r1
 80038aa:	4604      	mov	r4, r0
 80038ac:	2258      	movs	r2, #88	; 0x58
 80038ae:	2100      	movs	r1, #0
 80038b0:	4628      	mov	r0, r5
 80038b2:	f000 fa9e 	bl	8003df2 <memset>
 80038b6:	4620      	mov	r0, r4
 80038b8:	2100      	movs	r1, #0
 80038ba:	f000 f811 	bl	80038e0 <_swiopen>
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	4604      	mov	r4, r0
 80038c2:	d00b      	beq.n	80038dc <_stat+0x36>
 80038c4:	686b      	ldr	r3, [r5, #4]
 80038c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038ca:	606b      	str	r3, [r5, #4]
 80038cc:	4629      	mov	r1, r5
 80038ce:	f7ff ffbb 	bl	8003848 <_swistat>
 80038d2:	4605      	mov	r5, r0
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7ff ff91 	bl	80037fc <_close>
 80038da:	462c      	mov	r4, r5
 80038dc:	4620      	mov	r0, r4
 80038de:	bd38      	pop	{r3, r4, r5, pc}

080038e0 <_swiopen>:
 80038e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038e4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003990 <_swiopen+0xb0>
 80038e8:	b097      	sub	sp, #92	; 0x5c
 80038ea:	4607      	mov	r7, r0
 80038ec:	460e      	mov	r6, r1
 80038ee:	2500      	movs	r5, #0
 80038f0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80038f4:	1c61      	adds	r1, r4, #1
 80038f6:	d037      	beq.n	8003968 <_swiopen+0x88>
 80038f8:	3501      	adds	r5, #1
 80038fa:	2d14      	cmp	r5, #20
 80038fc:	d1f8      	bne.n	80038f0 <_swiopen+0x10>
 80038fe:	f000 f947 	bl	8003b90 <__errno>
 8003902:	2318      	movs	r3, #24
 8003904:	6003      	str	r3, [r0, #0]
 8003906:	f04f 34ff 	mov.w	r4, #4294967295
 800390a:	e03d      	b.n	8003988 <_swiopen+0xa8>
 800390c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003910:	f240 6301 	movw	r3, #1537	; 0x601
 8003914:	07b2      	lsls	r2, r6, #30
 8003916:	bf48      	it	mi
 8003918:	f044 0402 	orrmi.w	r4, r4, #2
 800391c:	421e      	tst	r6, r3
 800391e:	bf18      	it	ne
 8003920:	f044 0404 	orrne.w	r4, r4, #4
 8003924:	0733      	lsls	r3, r6, #28
 8003926:	bf48      	it	mi
 8003928:	f024 0404 	bicmi.w	r4, r4, #4
 800392c:	4638      	mov	r0, r7
 800392e:	bf48      	it	mi
 8003930:	f044 0408 	orrmi.w	r4, r4, #8
 8003934:	9700      	str	r7, [sp, #0]
 8003936:	f7fc fc4b 	bl	80001d0 <strlen>
 800393a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800393e:	2401      	movs	r4, #1
 8003940:	4620      	mov	r0, r4
 8003942:	4649      	mov	r1, r9
 8003944:	beab      	bkpt	0x00ab
 8003946:	4604      	mov	r4, r0
 8003948:	2c00      	cmp	r4, #0
 800394a:	db08      	blt.n	800395e <_swiopen+0x7e>
 800394c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003950:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003954:	2300      	movs	r3, #0
 8003956:	f8c8 3004 	str.w	r3, [r8, #4]
 800395a:	462c      	mov	r4, r5
 800395c:	e014      	b.n	8003988 <_swiopen+0xa8>
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff fe8e 	bl	8003680 <error>
 8003964:	4604      	mov	r4, r0
 8003966:	e00f      	b.n	8003988 <_swiopen+0xa8>
 8003968:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800396c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003970:	46e9      	mov	r9, sp
 8003972:	d1cb      	bne.n	800390c <_swiopen+0x2c>
 8003974:	4649      	mov	r1, r9
 8003976:	4638      	mov	r0, r7
 8003978:	f7ff ff95 	bl	80038a6 <_stat>
 800397c:	3001      	adds	r0, #1
 800397e:	d0c5      	beq.n	800390c <_swiopen+0x2c>
 8003980:	f000 f906 	bl	8003b90 <__errno>
 8003984:	2311      	movs	r3, #17
 8003986:	6003      	str	r3, [r0, #0]
 8003988:	4620      	mov	r0, r4
 800398a:	b017      	add	sp, #92	; 0x5c
 800398c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003990:	200003f0 	.word	0x200003f0

08003994 <_get_semihosting_exts>:
 8003994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003998:	4606      	mov	r6, r0
 800399a:	460f      	mov	r7, r1
 800399c:	482a      	ldr	r0, [pc, #168]	; (8003a48 <_get_semihosting_exts+0xb4>)
 800399e:	2100      	movs	r1, #0
 80039a0:	4615      	mov	r5, r2
 80039a2:	f7ff ff9d 	bl	80038e0 <_swiopen>
 80039a6:	462a      	mov	r2, r5
 80039a8:	4604      	mov	r4, r0
 80039aa:	2100      	movs	r1, #0
 80039ac:	4630      	mov	r0, r6
 80039ae:	f000 fa20 	bl	8003df2 <memset>
 80039b2:	1c63      	adds	r3, r4, #1
 80039b4:	d016      	beq.n	80039e4 <_get_semihosting_exts+0x50>
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7ff fe48 	bl	800364c <findslot>
 80039bc:	f04f 090c 	mov.w	r9, #12
 80039c0:	4680      	mov	r8, r0
 80039c2:	4648      	mov	r0, r9
 80039c4:	4641      	mov	r1, r8
 80039c6:	beab      	bkpt	0x00ab
 80039c8:	4680      	mov	r8, r0
 80039ca:	4640      	mov	r0, r8
 80039cc:	f7ff fe66 	bl	800369c <checkerror>
 80039d0:	2803      	cmp	r0, #3
 80039d2:	dd02      	ble.n	80039da <_get_semihosting_exts+0x46>
 80039d4:	1ec3      	subs	r3, r0, #3
 80039d6:	42ab      	cmp	r3, r5
 80039d8:	dc08      	bgt.n	80039ec <_get_semihosting_exts+0x58>
 80039da:	4620      	mov	r0, r4
 80039dc:	f7ff ff0e 	bl	80037fc <_close>
 80039e0:	f04f 34ff 	mov.w	r4, #4294967295
 80039e4:	4620      	mov	r0, r4
 80039e6:	b003      	add	sp, #12
 80039e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039ec:	2204      	movs	r2, #4
 80039ee:	eb0d 0102 	add.w	r1, sp, r2
 80039f2:	4620      	mov	r0, r4
 80039f4:	f7ff fe67 	bl	80036c6 <_read>
 80039f8:	2803      	cmp	r0, #3
 80039fa:	ddee      	ble.n	80039da <_get_semihosting_exts+0x46>
 80039fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003a00:	2b53      	cmp	r3, #83	; 0x53
 8003a02:	d1ea      	bne.n	80039da <_get_semihosting_exts+0x46>
 8003a04:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003a08:	2b48      	cmp	r3, #72	; 0x48
 8003a0a:	d1e6      	bne.n	80039da <_get_semihosting_exts+0x46>
 8003a0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003a10:	2b46      	cmp	r3, #70	; 0x46
 8003a12:	d1e2      	bne.n	80039da <_get_semihosting_exts+0x46>
 8003a14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a18:	2b42      	cmp	r3, #66	; 0x42
 8003a1a:	d1de      	bne.n	80039da <_get_semihosting_exts+0x46>
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	4639      	mov	r1, r7
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7ff fe6c 	bl	80036fe <_swilseek>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	dbd7      	blt.n	80039da <_get_semihosting_exts+0x46>
 8003a2a:	462a      	mov	r2, r5
 8003a2c:	4631      	mov	r1, r6
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f7ff fe49 	bl	80036c6 <_read>
 8003a34:	4605      	mov	r5, r0
 8003a36:	4620      	mov	r0, r4
 8003a38:	f7ff fee0 	bl	80037fc <_close>
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f7ff fe2d 	bl	800369c <checkerror>
 8003a42:	4604      	mov	r4, r0
 8003a44:	e7ce      	b.n	80039e4 <_get_semihosting_exts+0x50>
 8003a46:	bf00      	nop
 8003a48:	0800525c 	.word	0x0800525c

08003a4c <initialise_semihosting_exts>:
 8003a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a4e:	4d0a      	ldr	r5, [pc, #40]	; (8003a78 <initialise_semihosting_exts+0x2c>)
 8003a50:	4c0a      	ldr	r4, [pc, #40]	; (8003a7c <initialise_semihosting_exts+0x30>)
 8003a52:	2100      	movs	r1, #0
 8003a54:	2201      	movs	r2, #1
 8003a56:	a801      	add	r0, sp, #4
 8003a58:	6029      	str	r1, [r5, #0]
 8003a5a:	6022      	str	r2, [r4, #0]
 8003a5c:	f7ff ff9a 	bl	8003994 <_get_semihosting_exts>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	dd07      	ble.n	8003a74 <initialise_semihosting_exts+0x28>
 8003a64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003a68:	f003 0201 	and.w	r2, r3, #1
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	602a      	str	r2, [r5, #0]
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	b003      	add	sp, #12
 8003a76:	bd30      	pop	{r4, r5, pc}
 8003a78:	2000000c 	.word	0x2000000c
 8003a7c:	20000010 	.word	0x20000010

08003a80 <_has_ext_stdout_stderr>:
 8003a80:	b510      	push	{r4, lr}
 8003a82:	4c04      	ldr	r4, [pc, #16]	; (8003a94 <_has_ext_stdout_stderr+0x14>)
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	da01      	bge.n	8003a8e <_has_ext_stdout_stderr+0xe>
 8003a8a:	f7ff ffdf 	bl	8003a4c <initialise_semihosting_exts>
 8003a8e:	6820      	ldr	r0, [r4, #0]
 8003a90:	bd10      	pop	{r4, pc}
 8003a92:	bf00      	nop
 8003a94:	20000010 	.word	0x20000010

08003a98 <initialise_monitor_handles>:
 8003a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003b50 <initialise_monitor_handles+0xb8>
 8003aa2:	f8cd 9004 	str.w	r9, [sp, #4]
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	2400      	movs	r4, #0
 8003aaa:	9303      	str	r3, [sp, #12]
 8003aac:	af01      	add	r7, sp, #4
 8003aae:	9402      	str	r4, [sp, #8]
 8003ab0:	2501      	movs	r5, #1
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	4639      	mov	r1, r7
 8003ab6:	beab      	bkpt	0x00ab
 8003ab8:	4605      	mov	r5, r0
 8003aba:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003b54 <initialise_monitor_handles+0xbc>
 8003abe:	4623      	mov	r3, r4
 8003ac0:	4c20      	ldr	r4, [pc, #128]	; (8003b44 <initialise_monitor_handles+0xac>)
 8003ac2:	f8c8 5000 	str.w	r5, [r8]
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	2b14      	cmp	r3, #20
 8003ad2:	d1fa      	bne.n	8003aca <initialise_monitor_handles+0x32>
 8003ad4:	f7ff ffd4 	bl	8003a80 <_has_ext_stdout_stderr>
 8003ad8:	4d1b      	ldr	r5, [pc, #108]	; (8003b48 <initialise_monitor_handles+0xb0>)
 8003ada:	b1d0      	cbz	r0, 8003b12 <initialise_monitor_handles+0x7a>
 8003adc:	f04f 0a03 	mov.w	sl, #3
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ae6:	2601      	movs	r6, #1
 8003ae8:	f8cd a00c 	str.w	sl, [sp, #12]
 8003aec:	9302      	str	r3, [sp, #8]
 8003aee:	4630      	mov	r0, r6
 8003af0:	4639      	mov	r1, r7
 8003af2:	beab      	bkpt	0x00ab
 8003af4:	4683      	mov	fp, r0
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <initialise_monitor_handles+0xb4>)
 8003af8:	f8cd 9004 	str.w	r9, [sp, #4]
 8003afc:	f8c3 b000 	str.w	fp, [r3]
 8003b00:	2308      	movs	r3, #8
 8003b02:	f8cd a00c 	str.w	sl, [sp, #12]
 8003b06:	9302      	str	r3, [sp, #8]
 8003b08:	4630      	mov	r0, r6
 8003b0a:	4639      	mov	r1, r7
 8003b0c:	beab      	bkpt	0x00ab
 8003b0e:	4606      	mov	r6, r0
 8003b10:	602e      	str	r6, [r5, #0]
 8003b12:	682b      	ldr	r3, [r5, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	bf02      	ittt	eq
 8003b18:	4b0c      	ldreq	r3, [pc, #48]	; (8003b4c <initialise_monitor_handles+0xb4>)
 8003b1a:	681b      	ldreq	r3, [r3, #0]
 8003b1c:	602b      	streq	r3, [r5, #0]
 8003b1e:	2600      	movs	r6, #0
 8003b20:	f8d8 3000 	ldr.w	r3, [r8]
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	6066      	str	r6, [r4, #4]
 8003b28:	f7ff ffaa 	bl	8003a80 <_has_ext_stdout_stderr>
 8003b2c:	b130      	cbz	r0, 8003b3c <initialise_monitor_handles+0xa4>
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <initialise_monitor_handles+0xb4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003b36:	682b      	ldr	r3, [r5, #0]
 8003b38:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003b3c:	b005      	add	sp, #20
 8003b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b42:	bf00      	nop
 8003b44:	200003f0 	.word	0x200003f0
 8003b48:	200003e4 	.word	0x200003e4
 8003b4c:	200003ec 	.word	0x200003ec
 8003b50:	08005272 	.word	0x08005272
 8003b54:	200003e8 	.word	0x200003e8

08003b58 <_isatty>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	f7ff fd77 	bl	800364c <findslot>
 8003b5e:	2509      	movs	r5, #9
 8003b60:	4604      	mov	r4, r0
 8003b62:	b920      	cbnz	r0, 8003b6e <_isatty+0x16>
 8003b64:	f000 f814 	bl	8003b90 <__errno>
 8003b68:	6005      	str	r5, [r0, #0]
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	4628      	mov	r0, r5
 8003b70:	4621      	mov	r1, r4
 8003b72:	beab      	bkpt	0x00ab
 8003b74:	4604      	mov	r4, r0
 8003b76:	2c01      	cmp	r4, #1
 8003b78:	d0f7      	beq.n	8003b6a <_isatty+0x12>
 8003b7a:	f000 f809 	bl	8003b90 <__errno>
 8003b7e:	2400      	movs	r4, #0
 8003b80:	4605      	mov	r5, r0
 8003b82:	2613      	movs	r6, #19
 8003b84:	4630      	mov	r0, r6
 8003b86:	4621      	mov	r1, r4
 8003b88:	beab      	bkpt	0x00ab
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	602e      	str	r6, [r5, #0]
 8003b8e:	e7ec      	b.n	8003b6a <_isatty+0x12>

08003b90 <__errno>:
 8003b90:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <__errno+0x8>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000014 	.word	0x20000014

08003b9c <std>:
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	b510      	push	{r4, lr}
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003baa:	6083      	str	r3, [r0, #8]
 8003bac:	8181      	strh	r1, [r0, #12]
 8003bae:	6643      	str	r3, [r0, #100]	; 0x64
 8003bb0:	81c2      	strh	r2, [r0, #14]
 8003bb2:	6183      	str	r3, [r0, #24]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	305c      	adds	r0, #92	; 0x5c
 8003bba:	f000 f91a 	bl	8003df2 <memset>
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <std+0x38>)
 8003bc0:	6263      	str	r3, [r4, #36]	; 0x24
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <std+0x3c>)
 8003bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <std+0x40>)
 8003bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <std+0x44>)
 8003bcc:	6224      	str	r4, [r4, #32]
 8003bce:	6323      	str	r3, [r4, #48]	; 0x30
 8003bd0:	bd10      	pop	{r4, pc}
 8003bd2:	bf00      	nop
 8003bd4:	08004079 	.word	0x08004079
 8003bd8:	0800409b 	.word	0x0800409b
 8003bdc:	080040d3 	.word	0x080040d3
 8003be0:	080040f7 	.word	0x080040f7

08003be4 <_cleanup_r>:
 8003be4:	4901      	ldr	r1, [pc, #4]	; (8003bec <_cleanup_r+0x8>)
 8003be6:	f000 b8af 	b.w	8003d48 <_fwalk_reent>
 8003bea:	bf00      	nop
 8003bec:	080043fd 	.word	0x080043fd

08003bf0 <__sfmoreglue>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	2268      	movs	r2, #104	; 0x68
 8003bf4:	1e4d      	subs	r5, r1, #1
 8003bf6:	4355      	muls	r5, r2
 8003bf8:	460e      	mov	r6, r1
 8003bfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bfe:	f000 f921 	bl	8003e44 <_malloc_r>
 8003c02:	4604      	mov	r4, r0
 8003c04:	b140      	cbz	r0, 8003c18 <__sfmoreglue+0x28>
 8003c06:	2100      	movs	r1, #0
 8003c08:	e9c0 1600 	strd	r1, r6, [r0]
 8003c0c:	300c      	adds	r0, #12
 8003c0e:	60a0      	str	r0, [r4, #8]
 8003c10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c14:	f000 f8ed 	bl	8003df2 <memset>
 8003c18:	4620      	mov	r0, r4
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}

08003c1c <__sfp_lock_acquire>:
 8003c1c:	4801      	ldr	r0, [pc, #4]	; (8003c24 <__sfp_lock_acquire+0x8>)
 8003c1e:	f000 b8d8 	b.w	8003dd2 <__retarget_lock_acquire_recursive>
 8003c22:	bf00      	nop
 8003c24:	20000491 	.word	0x20000491

08003c28 <__sfp_lock_release>:
 8003c28:	4801      	ldr	r0, [pc, #4]	; (8003c30 <__sfp_lock_release+0x8>)
 8003c2a:	f000 b8d3 	b.w	8003dd4 <__retarget_lock_release_recursive>
 8003c2e:	bf00      	nop
 8003c30:	20000491 	.word	0x20000491

08003c34 <__sinit_lock_acquire>:
 8003c34:	4801      	ldr	r0, [pc, #4]	; (8003c3c <__sinit_lock_acquire+0x8>)
 8003c36:	f000 b8cc 	b.w	8003dd2 <__retarget_lock_acquire_recursive>
 8003c3a:	bf00      	nop
 8003c3c:	20000492 	.word	0x20000492

08003c40 <__sinit_lock_release>:
 8003c40:	4801      	ldr	r0, [pc, #4]	; (8003c48 <__sinit_lock_release+0x8>)
 8003c42:	f000 b8c7 	b.w	8003dd4 <__retarget_lock_release_recursive>
 8003c46:	bf00      	nop
 8003c48:	20000492 	.word	0x20000492

08003c4c <__sinit>:
 8003c4c:	b510      	push	{r4, lr}
 8003c4e:	4604      	mov	r4, r0
 8003c50:	f7ff fff0 	bl	8003c34 <__sinit_lock_acquire>
 8003c54:	69a3      	ldr	r3, [r4, #24]
 8003c56:	b11b      	cbz	r3, 8003c60 <__sinit+0x14>
 8003c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c5c:	f7ff bff0 	b.w	8003c40 <__sinit_lock_release>
 8003c60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003c64:	6523      	str	r3, [r4, #80]	; 0x50
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <__sinit+0x68>)
 8003c68:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <__sinit+0x6c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003c6e:	42a3      	cmp	r3, r4
 8003c70:	bf04      	itt	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	61a3      	streq	r3, [r4, #24]
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 f820 	bl	8003cbc <__sfp>
 8003c7c:	6060      	str	r0, [r4, #4]
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f000 f81c 	bl	8003cbc <__sfp>
 8003c84:	60a0      	str	r0, [r4, #8]
 8003c86:	4620      	mov	r0, r4
 8003c88:	f000 f818 	bl	8003cbc <__sfp>
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	60e0      	str	r0, [r4, #12]
 8003c90:	2104      	movs	r1, #4
 8003c92:	6860      	ldr	r0, [r4, #4]
 8003c94:	f7ff ff82 	bl	8003b9c <std>
 8003c98:	68a0      	ldr	r0, [r4, #8]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	2109      	movs	r1, #9
 8003c9e:	f7ff ff7d 	bl	8003b9c <std>
 8003ca2:	68e0      	ldr	r0, [r4, #12]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	2112      	movs	r1, #18
 8003ca8:	f7ff ff78 	bl	8003b9c <std>
 8003cac:	2301      	movs	r3, #1
 8003cae:	61a3      	str	r3, [r4, #24]
 8003cb0:	e7d2      	b.n	8003c58 <__sinit+0xc>
 8003cb2:	bf00      	nop
 8003cb4:	080052d8 	.word	0x080052d8
 8003cb8:	08003be5 	.word	0x08003be5

08003cbc <__sfp>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	4607      	mov	r7, r0
 8003cc0:	f7ff ffac 	bl	8003c1c <__sfp_lock_acquire>
 8003cc4:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <__sfp+0x84>)
 8003cc6:	681e      	ldr	r6, [r3, #0]
 8003cc8:	69b3      	ldr	r3, [r6, #24]
 8003cca:	b913      	cbnz	r3, 8003cd2 <__sfp+0x16>
 8003ccc:	4630      	mov	r0, r6
 8003cce:	f7ff ffbd 	bl	8003c4c <__sinit>
 8003cd2:	3648      	adds	r6, #72	; 0x48
 8003cd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	d503      	bpl.n	8003ce4 <__sfp+0x28>
 8003cdc:	6833      	ldr	r3, [r6, #0]
 8003cde:	b30b      	cbz	r3, 8003d24 <__sfp+0x68>
 8003ce0:	6836      	ldr	r6, [r6, #0]
 8003ce2:	e7f7      	b.n	8003cd4 <__sfp+0x18>
 8003ce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ce8:	b9d5      	cbnz	r5, 8003d20 <__sfp+0x64>
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <__sfp+0x88>)
 8003cec:	60e3      	str	r3, [r4, #12]
 8003cee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cf2:	6665      	str	r5, [r4, #100]	; 0x64
 8003cf4:	f000 f86c 	bl	8003dd0 <__retarget_lock_init_recursive>
 8003cf8:	f7ff ff96 	bl	8003c28 <__sfp_lock_release>
 8003cfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d04:	6025      	str	r5, [r4, #0]
 8003d06:	61a5      	str	r5, [r4, #24]
 8003d08:	2208      	movs	r2, #8
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d10:	f000 f86f 	bl	8003df2 <memset>
 8003d14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d20:	3468      	adds	r4, #104	; 0x68
 8003d22:	e7d9      	b.n	8003cd8 <__sfp+0x1c>
 8003d24:	2104      	movs	r1, #4
 8003d26:	4638      	mov	r0, r7
 8003d28:	f7ff ff62 	bl	8003bf0 <__sfmoreglue>
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	6030      	str	r0, [r6, #0]
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d1d5      	bne.n	8003ce0 <__sfp+0x24>
 8003d34:	f7ff ff78 	bl	8003c28 <__sfp_lock_release>
 8003d38:	230c      	movs	r3, #12
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	e7ee      	b.n	8003d1c <__sfp+0x60>
 8003d3e:	bf00      	nop
 8003d40:	080052d8 	.word	0x080052d8
 8003d44:	ffff0001 	.word	0xffff0001

08003d48 <_fwalk_reent>:
 8003d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d4c:	4606      	mov	r6, r0
 8003d4e:	4688      	mov	r8, r1
 8003d50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d54:	2700      	movs	r7, #0
 8003d56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d5a:	f1b9 0901 	subs.w	r9, r9, #1
 8003d5e:	d505      	bpl.n	8003d6c <_fwalk_reent+0x24>
 8003d60:	6824      	ldr	r4, [r4, #0]
 8003d62:	2c00      	cmp	r4, #0
 8003d64:	d1f7      	bne.n	8003d56 <_fwalk_reent+0xe>
 8003d66:	4638      	mov	r0, r7
 8003d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d6c:	89ab      	ldrh	r3, [r5, #12]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d907      	bls.n	8003d82 <_fwalk_reent+0x3a>
 8003d72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d76:	3301      	adds	r3, #1
 8003d78:	d003      	beq.n	8003d82 <_fwalk_reent+0x3a>
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	47c0      	blx	r8
 8003d80:	4307      	orrs	r7, r0
 8003d82:	3568      	adds	r5, #104	; 0x68
 8003d84:	e7e9      	b.n	8003d5a <_fwalk_reent+0x12>
	...

08003d88 <__libc_init_array>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	4d0d      	ldr	r5, [pc, #52]	; (8003dc0 <__libc_init_array+0x38>)
 8003d8c:	4c0d      	ldr	r4, [pc, #52]	; (8003dc4 <__libc_init_array+0x3c>)
 8003d8e:	1b64      	subs	r4, r4, r5
 8003d90:	10a4      	asrs	r4, r4, #2
 8003d92:	2600      	movs	r6, #0
 8003d94:	42a6      	cmp	r6, r4
 8003d96:	d109      	bne.n	8003dac <__libc_init_array+0x24>
 8003d98:	4d0b      	ldr	r5, [pc, #44]	; (8003dc8 <__libc_init_array+0x40>)
 8003d9a:	4c0c      	ldr	r4, [pc, #48]	; (8003dcc <__libc_init_array+0x44>)
 8003d9c:	f000 ffb0 	bl	8004d00 <_init>
 8003da0:	1b64      	subs	r4, r4, r5
 8003da2:	10a4      	asrs	r4, r4, #2
 8003da4:	2600      	movs	r6, #0
 8003da6:	42a6      	cmp	r6, r4
 8003da8:	d105      	bne.n	8003db6 <__libc_init_array+0x2e>
 8003daa:	bd70      	pop	{r4, r5, r6, pc}
 8003dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db0:	4798      	blx	r3
 8003db2:	3601      	adds	r6, #1
 8003db4:	e7ee      	b.n	8003d94 <__libc_init_array+0xc>
 8003db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dba:	4798      	blx	r3
 8003dbc:	3601      	adds	r6, #1
 8003dbe:	e7f2      	b.n	8003da6 <__libc_init_array+0x1e>
 8003dc0:	08005318 	.word	0x08005318
 8003dc4:	08005318 	.word	0x08005318
 8003dc8:	08005318 	.word	0x08005318
 8003dcc:	0800531c 	.word	0x0800531c

08003dd0 <__retarget_lock_init_recursive>:
 8003dd0:	4770      	bx	lr

08003dd2 <__retarget_lock_acquire_recursive>:
 8003dd2:	4770      	bx	lr

08003dd4 <__retarget_lock_release_recursive>:
 8003dd4:	4770      	bx	lr

08003dd6 <memcpy>:
 8003dd6:	440a      	add	r2, r1
 8003dd8:	4291      	cmp	r1, r2
 8003dda:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dde:	d100      	bne.n	8003de2 <memcpy+0xc>
 8003de0:	4770      	bx	lr
 8003de2:	b510      	push	{r4, lr}
 8003de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dec:	4291      	cmp	r1, r2
 8003dee:	d1f9      	bne.n	8003de4 <memcpy+0xe>
 8003df0:	bd10      	pop	{r4, pc}

08003df2 <memset>:
 8003df2:	4402      	add	r2, r0
 8003df4:	4603      	mov	r3, r0
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d100      	bne.n	8003dfc <memset+0xa>
 8003dfa:	4770      	bx	lr
 8003dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8003e00:	e7f9      	b.n	8003df6 <memset+0x4>
	...

08003e04 <sbrk_aligned>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4e0e      	ldr	r6, [pc, #56]	; (8003e40 <sbrk_aligned+0x3c>)
 8003e08:	460c      	mov	r4, r1
 8003e0a:	6831      	ldr	r1, [r6, #0]
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	b911      	cbnz	r1, 8003e16 <sbrk_aligned+0x12>
 8003e10:	f000 f902 	bl	8004018 <_sbrk_r>
 8003e14:	6030      	str	r0, [r6, #0]
 8003e16:	4621      	mov	r1, r4
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f000 f8fd 	bl	8004018 <_sbrk_r>
 8003e1e:	1c43      	adds	r3, r0, #1
 8003e20:	d00a      	beq.n	8003e38 <sbrk_aligned+0x34>
 8003e22:	1cc4      	adds	r4, r0, #3
 8003e24:	f024 0403 	bic.w	r4, r4, #3
 8003e28:	42a0      	cmp	r0, r4
 8003e2a:	d007      	beq.n	8003e3c <sbrk_aligned+0x38>
 8003e2c:	1a21      	subs	r1, r4, r0
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f000 f8f2 	bl	8004018 <_sbrk_r>
 8003e34:	3001      	adds	r0, #1
 8003e36:	d101      	bne.n	8003e3c <sbrk_aligned+0x38>
 8003e38:	f04f 34ff 	mov.w	r4, #4294967295
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	20000498 	.word	0x20000498

08003e44 <_malloc_r>:
 8003e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e48:	1ccd      	adds	r5, r1, #3
 8003e4a:	f025 0503 	bic.w	r5, r5, #3
 8003e4e:	3508      	adds	r5, #8
 8003e50:	2d0c      	cmp	r5, #12
 8003e52:	bf38      	it	cc
 8003e54:	250c      	movcc	r5, #12
 8003e56:	2d00      	cmp	r5, #0
 8003e58:	4607      	mov	r7, r0
 8003e5a:	db01      	blt.n	8003e60 <_malloc_r+0x1c>
 8003e5c:	42a9      	cmp	r1, r5
 8003e5e:	d905      	bls.n	8003e6c <_malloc_r+0x28>
 8003e60:	230c      	movs	r3, #12
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	2600      	movs	r6, #0
 8003e66:	4630      	mov	r0, r6
 8003e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e6c:	4e2e      	ldr	r6, [pc, #184]	; (8003f28 <_malloc_r+0xe4>)
 8003e6e:	f000 fb79 	bl	8004564 <__malloc_lock>
 8003e72:	6833      	ldr	r3, [r6, #0]
 8003e74:	461c      	mov	r4, r3
 8003e76:	bb34      	cbnz	r4, 8003ec6 <_malloc_r+0x82>
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	f7ff ffc2 	bl	8003e04 <sbrk_aligned>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	4604      	mov	r4, r0
 8003e84:	d14d      	bne.n	8003f22 <_malloc_r+0xde>
 8003e86:	6834      	ldr	r4, [r6, #0]
 8003e88:	4626      	mov	r6, r4
 8003e8a:	2e00      	cmp	r6, #0
 8003e8c:	d140      	bne.n	8003f10 <_malloc_r+0xcc>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	4631      	mov	r1, r6
 8003e92:	4638      	mov	r0, r7
 8003e94:	eb04 0803 	add.w	r8, r4, r3
 8003e98:	f000 f8be 	bl	8004018 <_sbrk_r>
 8003e9c:	4580      	cmp	r8, r0
 8003e9e:	d13a      	bne.n	8003f16 <_malloc_r+0xd2>
 8003ea0:	6821      	ldr	r1, [r4, #0]
 8003ea2:	3503      	adds	r5, #3
 8003ea4:	1a6d      	subs	r5, r5, r1
 8003ea6:	f025 0503 	bic.w	r5, r5, #3
 8003eaa:	3508      	adds	r5, #8
 8003eac:	2d0c      	cmp	r5, #12
 8003eae:	bf38      	it	cc
 8003eb0:	250c      	movcc	r5, #12
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7ff ffa5 	bl	8003e04 <sbrk_aligned>
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d02b      	beq.n	8003f16 <_malloc_r+0xd2>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	442b      	add	r3, r5
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	e00e      	b.n	8003ee4 <_malloc_r+0xa0>
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	1b52      	subs	r2, r2, r5
 8003eca:	d41e      	bmi.n	8003f0a <_malloc_r+0xc6>
 8003ecc:	2a0b      	cmp	r2, #11
 8003ece:	d916      	bls.n	8003efe <_malloc_r+0xba>
 8003ed0:	1961      	adds	r1, r4, r5
 8003ed2:	42a3      	cmp	r3, r4
 8003ed4:	6025      	str	r5, [r4, #0]
 8003ed6:	bf18      	it	ne
 8003ed8:	6059      	strne	r1, [r3, #4]
 8003eda:	6863      	ldr	r3, [r4, #4]
 8003edc:	bf08      	it	eq
 8003ede:	6031      	streq	r1, [r6, #0]
 8003ee0:	5162      	str	r2, [r4, r5]
 8003ee2:	604b      	str	r3, [r1, #4]
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f104 060b 	add.w	r6, r4, #11
 8003eea:	f000 fb41 	bl	8004570 <__malloc_unlock>
 8003eee:	f026 0607 	bic.w	r6, r6, #7
 8003ef2:	1d23      	adds	r3, r4, #4
 8003ef4:	1af2      	subs	r2, r6, r3
 8003ef6:	d0b6      	beq.n	8003e66 <_malloc_r+0x22>
 8003ef8:	1b9b      	subs	r3, r3, r6
 8003efa:	50a3      	str	r3, [r4, r2]
 8003efc:	e7b3      	b.n	8003e66 <_malloc_r+0x22>
 8003efe:	6862      	ldr	r2, [r4, #4]
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	bf0c      	ite	eq
 8003f04:	6032      	streq	r2, [r6, #0]
 8003f06:	605a      	strne	r2, [r3, #4]
 8003f08:	e7ec      	b.n	8003ee4 <_malloc_r+0xa0>
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	6864      	ldr	r4, [r4, #4]
 8003f0e:	e7b2      	b.n	8003e76 <_malloc_r+0x32>
 8003f10:	4634      	mov	r4, r6
 8003f12:	6876      	ldr	r6, [r6, #4]
 8003f14:	e7b9      	b.n	8003e8a <_malloc_r+0x46>
 8003f16:	230c      	movs	r3, #12
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	f000 fb28 	bl	8004570 <__malloc_unlock>
 8003f20:	e7a1      	b.n	8003e66 <_malloc_r+0x22>
 8003f22:	6025      	str	r5, [r4, #0]
 8003f24:	e7de      	b.n	8003ee4 <_malloc_r+0xa0>
 8003f26:	bf00      	nop
 8003f28:	20000494 	.word	0x20000494

08003f2c <_puts_r>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	460e      	mov	r6, r1
 8003f30:	4605      	mov	r5, r0
 8003f32:	b118      	cbz	r0, 8003f3c <_puts_r+0x10>
 8003f34:	6983      	ldr	r3, [r0, #24]
 8003f36:	b90b      	cbnz	r3, 8003f3c <_puts_r+0x10>
 8003f38:	f7ff fe88 	bl	8003c4c <__sinit>
 8003f3c:	69ab      	ldr	r3, [r5, #24]
 8003f3e:	68ac      	ldr	r4, [r5, #8]
 8003f40:	b913      	cbnz	r3, 8003f48 <_puts_r+0x1c>
 8003f42:	4628      	mov	r0, r5
 8003f44:	f7ff fe82 	bl	8003c4c <__sinit>
 8003f48:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <_puts_r+0xd0>)
 8003f4a:	429c      	cmp	r4, r3
 8003f4c:	d120      	bne.n	8003f90 <_puts_r+0x64>
 8003f4e:	686c      	ldr	r4, [r5, #4]
 8003f50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f52:	07db      	lsls	r3, r3, #31
 8003f54:	d405      	bmi.n	8003f62 <_puts_r+0x36>
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	0598      	lsls	r0, r3, #22
 8003f5a:	d402      	bmi.n	8003f62 <_puts_r+0x36>
 8003f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f5e:	f7ff ff38 	bl	8003dd2 <__retarget_lock_acquire_recursive>
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	0719      	lsls	r1, r3, #28
 8003f66:	d51d      	bpl.n	8003fa4 <_puts_r+0x78>
 8003f68:	6923      	ldr	r3, [r4, #16]
 8003f6a:	b1db      	cbz	r3, 8003fa4 <_puts_r+0x78>
 8003f6c:	3e01      	subs	r6, #1
 8003f6e:	68a3      	ldr	r3, [r4, #8]
 8003f70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f74:	3b01      	subs	r3, #1
 8003f76:	60a3      	str	r3, [r4, #8]
 8003f78:	bb39      	cbnz	r1, 8003fca <_puts_r+0x9e>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da38      	bge.n	8003ff0 <_puts_r+0xc4>
 8003f7e:	4622      	mov	r2, r4
 8003f80:	210a      	movs	r1, #10
 8003f82:	4628      	mov	r0, r5
 8003f84:	f000 f8d2 	bl	800412c <__swbuf_r>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d011      	beq.n	8003fb0 <_puts_r+0x84>
 8003f8c:	250a      	movs	r5, #10
 8003f8e:	e011      	b.n	8003fb4 <_puts_r+0x88>
 8003f90:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <_puts_r+0xd4>)
 8003f92:	429c      	cmp	r4, r3
 8003f94:	d101      	bne.n	8003f9a <_puts_r+0x6e>
 8003f96:	68ac      	ldr	r4, [r5, #8]
 8003f98:	e7da      	b.n	8003f50 <_puts_r+0x24>
 8003f9a:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <_puts_r+0xd8>)
 8003f9c:	429c      	cmp	r4, r3
 8003f9e:	bf08      	it	eq
 8003fa0:	68ec      	ldreq	r4, [r5, #12]
 8003fa2:	e7d5      	b.n	8003f50 <_puts_r+0x24>
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f000 f924 	bl	80041f4 <__swsetup_r>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d0dd      	beq.n	8003f6c <_puts_r+0x40>
 8003fb0:	f04f 35ff 	mov.w	r5, #4294967295
 8003fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fb6:	07da      	lsls	r2, r3, #31
 8003fb8:	d405      	bmi.n	8003fc6 <_puts_r+0x9a>
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	059b      	lsls	r3, r3, #22
 8003fbe:	d402      	bmi.n	8003fc6 <_puts_r+0x9a>
 8003fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fc2:	f7ff ff07 	bl	8003dd4 <__retarget_lock_release_recursive>
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	bd70      	pop	{r4, r5, r6, pc}
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	da04      	bge.n	8003fd8 <_puts_r+0xac>
 8003fce:	69a2      	ldr	r2, [r4, #24]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	dc06      	bgt.n	8003fe2 <_puts_r+0xb6>
 8003fd4:	290a      	cmp	r1, #10
 8003fd6:	d004      	beq.n	8003fe2 <_puts_r+0xb6>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	6022      	str	r2, [r4, #0]
 8003fde:	7019      	strb	r1, [r3, #0]
 8003fe0:	e7c5      	b.n	8003f6e <_puts_r+0x42>
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f000 f8a1 	bl	800412c <__swbuf_r>
 8003fea:	3001      	adds	r0, #1
 8003fec:	d1bf      	bne.n	8003f6e <_puts_r+0x42>
 8003fee:	e7df      	b.n	8003fb0 <_puts_r+0x84>
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	250a      	movs	r5, #10
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	6022      	str	r2, [r4, #0]
 8003ff8:	701d      	strb	r5, [r3, #0]
 8003ffa:	e7db      	b.n	8003fb4 <_puts_r+0x88>
 8003ffc:	08005298 	.word	0x08005298
 8004000:	080052b8 	.word	0x080052b8
 8004004:	08005278 	.word	0x08005278

08004008 <puts>:
 8004008:	4b02      	ldr	r3, [pc, #8]	; (8004014 <puts+0xc>)
 800400a:	4601      	mov	r1, r0
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	f7ff bf8d 	b.w	8003f2c <_puts_r>
 8004012:	bf00      	nop
 8004014:	20000014 	.word	0x20000014

08004018 <_sbrk_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4d06      	ldr	r5, [pc, #24]	; (8004034 <_sbrk_r+0x1c>)
 800401c:	2300      	movs	r3, #0
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	602b      	str	r3, [r5, #0]
 8004024:	f7fc fce8 	bl	80009f8 <_sbrk>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_sbrk_r+0x1a>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_sbrk_r+0x1a>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	2000049c 	.word	0x2000049c

08004038 <siprintf>:
 8004038:	b40e      	push	{r1, r2, r3}
 800403a:	b500      	push	{lr}
 800403c:	b09c      	sub	sp, #112	; 0x70
 800403e:	ab1d      	add	r3, sp, #116	; 0x74
 8004040:	9002      	str	r0, [sp, #8]
 8004042:	9006      	str	r0, [sp, #24]
 8004044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004048:	4809      	ldr	r0, [pc, #36]	; (8004070 <siprintf+0x38>)
 800404a:	9107      	str	r1, [sp, #28]
 800404c:	9104      	str	r1, [sp, #16]
 800404e:	4909      	ldr	r1, [pc, #36]	; (8004074 <siprintf+0x3c>)
 8004050:	f853 2b04 	ldr.w	r2, [r3], #4
 8004054:	9105      	str	r1, [sp, #20]
 8004056:	6800      	ldr	r0, [r0, #0]
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	a902      	add	r1, sp, #8
 800405c:	f000 fb36 	bl	80046cc <_svfiprintf_r>
 8004060:	9b02      	ldr	r3, [sp, #8]
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	b01c      	add	sp, #112	; 0x70
 8004068:	f85d eb04 	ldr.w	lr, [sp], #4
 800406c:	b003      	add	sp, #12
 800406e:	4770      	bx	lr
 8004070:	20000014 	.word	0x20000014
 8004074:	ffff0208 	.word	0xffff0208

08004078 <__sread>:
 8004078:	b510      	push	{r4, lr}
 800407a:	460c      	mov	r4, r1
 800407c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004080:	f000 fdb8 	bl	8004bf4 <_read_r>
 8004084:	2800      	cmp	r0, #0
 8004086:	bfab      	itete	ge
 8004088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800408a:	89a3      	ldrhlt	r3, [r4, #12]
 800408c:	181b      	addge	r3, r3, r0
 800408e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004092:	bfac      	ite	ge
 8004094:	6563      	strge	r3, [r4, #84]	; 0x54
 8004096:	81a3      	strhlt	r3, [r4, #12]
 8004098:	bd10      	pop	{r4, pc}

0800409a <__swrite>:
 800409a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409e:	461f      	mov	r7, r3
 80040a0:	898b      	ldrh	r3, [r1, #12]
 80040a2:	05db      	lsls	r3, r3, #23
 80040a4:	4605      	mov	r5, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	4616      	mov	r6, r2
 80040aa:	d505      	bpl.n	80040b8 <__swrite+0x1e>
 80040ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b0:	2302      	movs	r3, #2
 80040b2:	2200      	movs	r2, #0
 80040b4:	f000 f9de 	bl	8004474 <_lseek_r>
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040c2:	81a3      	strh	r3, [r4, #12]
 80040c4:	4632      	mov	r2, r6
 80040c6:	463b      	mov	r3, r7
 80040c8:	4628      	mov	r0, r5
 80040ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ce:	f000 b87f 	b.w	80041d0 <_write_r>

080040d2 <__sseek>:
 80040d2:	b510      	push	{r4, lr}
 80040d4:	460c      	mov	r4, r1
 80040d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040da:	f000 f9cb 	bl	8004474 <_lseek_r>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	bf15      	itete	ne
 80040e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80040e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040ee:	81a3      	strheq	r3, [r4, #12]
 80040f0:	bf18      	it	ne
 80040f2:	81a3      	strhne	r3, [r4, #12]
 80040f4:	bd10      	pop	{r4, pc}

080040f6 <__sclose>:
 80040f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040fa:	f000 b8e9 	b.w	80042d0 <_close_r>

080040fe <strstr>:
 80040fe:	780a      	ldrb	r2, [r1, #0]
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	b96a      	cbnz	r2, 8004120 <strstr+0x22>
 8004104:	bd70      	pop	{r4, r5, r6, pc}
 8004106:	429a      	cmp	r2, r3
 8004108:	d109      	bne.n	800411e <strstr+0x20>
 800410a:	460c      	mov	r4, r1
 800410c:	4605      	mov	r5, r0
 800410e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f6      	beq.n	8004104 <strstr+0x6>
 8004116:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800411a:	429e      	cmp	r6, r3
 800411c:	d0f7      	beq.n	800410e <strstr+0x10>
 800411e:	3001      	adds	r0, #1
 8004120:	7803      	ldrb	r3, [r0, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1ef      	bne.n	8004106 <strstr+0x8>
 8004126:	4618      	mov	r0, r3
 8004128:	e7ec      	b.n	8004104 <strstr+0x6>
	...

0800412c <__swbuf_r>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	460e      	mov	r6, r1
 8004130:	4614      	mov	r4, r2
 8004132:	4605      	mov	r5, r0
 8004134:	b118      	cbz	r0, 800413e <__swbuf_r+0x12>
 8004136:	6983      	ldr	r3, [r0, #24]
 8004138:	b90b      	cbnz	r3, 800413e <__swbuf_r+0x12>
 800413a:	f7ff fd87 	bl	8003c4c <__sinit>
 800413e:	4b21      	ldr	r3, [pc, #132]	; (80041c4 <__swbuf_r+0x98>)
 8004140:	429c      	cmp	r4, r3
 8004142:	d12b      	bne.n	800419c <__swbuf_r+0x70>
 8004144:	686c      	ldr	r4, [r5, #4]
 8004146:	69a3      	ldr	r3, [r4, #24]
 8004148:	60a3      	str	r3, [r4, #8]
 800414a:	89a3      	ldrh	r3, [r4, #12]
 800414c:	071a      	lsls	r2, r3, #28
 800414e:	d52f      	bpl.n	80041b0 <__swbuf_r+0x84>
 8004150:	6923      	ldr	r3, [r4, #16]
 8004152:	b36b      	cbz	r3, 80041b0 <__swbuf_r+0x84>
 8004154:	6923      	ldr	r3, [r4, #16]
 8004156:	6820      	ldr	r0, [r4, #0]
 8004158:	1ac0      	subs	r0, r0, r3
 800415a:	6963      	ldr	r3, [r4, #20]
 800415c:	b2f6      	uxtb	r6, r6
 800415e:	4283      	cmp	r3, r0
 8004160:	4637      	mov	r7, r6
 8004162:	dc04      	bgt.n	800416e <__swbuf_r+0x42>
 8004164:	4621      	mov	r1, r4
 8004166:	4628      	mov	r0, r5
 8004168:	f000 f948 	bl	80043fc <_fflush_r>
 800416c:	bb30      	cbnz	r0, 80041bc <__swbuf_r+0x90>
 800416e:	68a3      	ldr	r3, [r4, #8]
 8004170:	3b01      	subs	r3, #1
 8004172:	60a3      	str	r3, [r4, #8]
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	6022      	str	r2, [r4, #0]
 800417a:	701e      	strb	r6, [r3, #0]
 800417c:	6963      	ldr	r3, [r4, #20]
 800417e:	3001      	adds	r0, #1
 8004180:	4283      	cmp	r3, r0
 8004182:	d004      	beq.n	800418e <__swbuf_r+0x62>
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	07db      	lsls	r3, r3, #31
 8004188:	d506      	bpl.n	8004198 <__swbuf_r+0x6c>
 800418a:	2e0a      	cmp	r6, #10
 800418c:	d104      	bne.n	8004198 <__swbuf_r+0x6c>
 800418e:	4621      	mov	r1, r4
 8004190:	4628      	mov	r0, r5
 8004192:	f000 f933 	bl	80043fc <_fflush_r>
 8004196:	b988      	cbnz	r0, 80041bc <__swbuf_r+0x90>
 8004198:	4638      	mov	r0, r7
 800419a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <__swbuf_r+0x9c>)
 800419e:	429c      	cmp	r4, r3
 80041a0:	d101      	bne.n	80041a6 <__swbuf_r+0x7a>
 80041a2:	68ac      	ldr	r4, [r5, #8]
 80041a4:	e7cf      	b.n	8004146 <__swbuf_r+0x1a>
 80041a6:	4b09      	ldr	r3, [pc, #36]	; (80041cc <__swbuf_r+0xa0>)
 80041a8:	429c      	cmp	r4, r3
 80041aa:	bf08      	it	eq
 80041ac:	68ec      	ldreq	r4, [r5, #12]
 80041ae:	e7ca      	b.n	8004146 <__swbuf_r+0x1a>
 80041b0:	4621      	mov	r1, r4
 80041b2:	4628      	mov	r0, r5
 80041b4:	f000 f81e 	bl	80041f4 <__swsetup_r>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	d0cb      	beq.n	8004154 <__swbuf_r+0x28>
 80041bc:	f04f 37ff 	mov.w	r7, #4294967295
 80041c0:	e7ea      	b.n	8004198 <__swbuf_r+0x6c>
 80041c2:	bf00      	nop
 80041c4:	08005298 	.word	0x08005298
 80041c8:	080052b8 	.word	0x080052b8
 80041cc:	08005278 	.word	0x08005278

080041d0 <_write_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4d07      	ldr	r5, [pc, #28]	; (80041f0 <_write_r+0x20>)
 80041d4:	4604      	mov	r4, r0
 80041d6:	4608      	mov	r0, r1
 80041d8:	4611      	mov	r1, r2
 80041da:	2200      	movs	r2, #0
 80041dc:	602a      	str	r2, [r5, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	f7ff fadb 	bl	800379a <_write>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d102      	bne.n	80041ee <_write_r+0x1e>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	b103      	cbz	r3, 80041ee <_write_r+0x1e>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	2000049c 	.word	0x2000049c

080041f4 <__swsetup_r>:
 80041f4:	4b32      	ldr	r3, [pc, #200]	; (80042c0 <__swsetup_r+0xcc>)
 80041f6:	b570      	push	{r4, r5, r6, lr}
 80041f8:	681d      	ldr	r5, [r3, #0]
 80041fa:	4606      	mov	r6, r0
 80041fc:	460c      	mov	r4, r1
 80041fe:	b125      	cbz	r5, 800420a <__swsetup_r+0x16>
 8004200:	69ab      	ldr	r3, [r5, #24]
 8004202:	b913      	cbnz	r3, 800420a <__swsetup_r+0x16>
 8004204:	4628      	mov	r0, r5
 8004206:	f7ff fd21 	bl	8003c4c <__sinit>
 800420a:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <__swsetup_r+0xd0>)
 800420c:	429c      	cmp	r4, r3
 800420e:	d10f      	bne.n	8004230 <__swsetup_r+0x3c>
 8004210:	686c      	ldr	r4, [r5, #4]
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004218:	0719      	lsls	r1, r3, #28
 800421a:	d42c      	bmi.n	8004276 <__swsetup_r+0x82>
 800421c:	06dd      	lsls	r5, r3, #27
 800421e:	d411      	bmi.n	8004244 <__swsetup_r+0x50>
 8004220:	2309      	movs	r3, #9
 8004222:	6033      	str	r3, [r6, #0]
 8004224:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	f04f 30ff 	mov.w	r0, #4294967295
 800422e:	e03e      	b.n	80042ae <__swsetup_r+0xba>
 8004230:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <__swsetup_r+0xd4>)
 8004232:	429c      	cmp	r4, r3
 8004234:	d101      	bne.n	800423a <__swsetup_r+0x46>
 8004236:	68ac      	ldr	r4, [r5, #8]
 8004238:	e7eb      	b.n	8004212 <__swsetup_r+0x1e>
 800423a:	4b24      	ldr	r3, [pc, #144]	; (80042cc <__swsetup_r+0xd8>)
 800423c:	429c      	cmp	r4, r3
 800423e:	bf08      	it	eq
 8004240:	68ec      	ldreq	r4, [r5, #12]
 8004242:	e7e6      	b.n	8004212 <__swsetup_r+0x1e>
 8004244:	0758      	lsls	r0, r3, #29
 8004246:	d512      	bpl.n	800426e <__swsetup_r+0x7a>
 8004248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800424a:	b141      	cbz	r1, 800425e <__swsetup_r+0x6a>
 800424c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004250:	4299      	cmp	r1, r3
 8004252:	d002      	beq.n	800425a <__swsetup_r+0x66>
 8004254:	4630      	mov	r0, r6
 8004256:	f000 f991 	bl	800457c <_free_r>
 800425a:	2300      	movs	r3, #0
 800425c:	6363      	str	r3, [r4, #52]	; 0x34
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004264:	81a3      	strh	r3, [r4, #12]
 8004266:	2300      	movs	r3, #0
 8004268:	6063      	str	r3, [r4, #4]
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f043 0308 	orr.w	r3, r3, #8
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	6923      	ldr	r3, [r4, #16]
 8004278:	b94b      	cbnz	r3, 800428e <__swsetup_r+0x9a>
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004284:	d003      	beq.n	800428e <__swsetup_r+0x9a>
 8004286:	4621      	mov	r1, r4
 8004288:	4630      	mov	r0, r6
 800428a:	f000 f92b 	bl	80044e4 <__smakebuf_r>
 800428e:	89a0      	ldrh	r0, [r4, #12]
 8004290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004294:	f010 0301 	ands.w	r3, r0, #1
 8004298:	d00a      	beq.n	80042b0 <__swsetup_r+0xbc>
 800429a:	2300      	movs	r3, #0
 800429c:	60a3      	str	r3, [r4, #8]
 800429e:	6963      	ldr	r3, [r4, #20]
 80042a0:	425b      	negs	r3, r3
 80042a2:	61a3      	str	r3, [r4, #24]
 80042a4:	6923      	ldr	r3, [r4, #16]
 80042a6:	b943      	cbnz	r3, 80042ba <__swsetup_r+0xc6>
 80042a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042ac:	d1ba      	bne.n	8004224 <__swsetup_r+0x30>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	0781      	lsls	r1, r0, #30
 80042b2:	bf58      	it	pl
 80042b4:	6963      	ldrpl	r3, [r4, #20]
 80042b6:	60a3      	str	r3, [r4, #8]
 80042b8:	e7f4      	b.n	80042a4 <__swsetup_r+0xb0>
 80042ba:	2000      	movs	r0, #0
 80042bc:	e7f7      	b.n	80042ae <__swsetup_r+0xba>
 80042be:	bf00      	nop
 80042c0:	20000014 	.word	0x20000014
 80042c4:	08005298 	.word	0x08005298
 80042c8:	080052b8 	.word	0x080052b8
 80042cc:	08005278 	.word	0x08005278

080042d0 <_close_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4d06      	ldr	r5, [pc, #24]	; (80042ec <_close_r+0x1c>)
 80042d4:	2300      	movs	r3, #0
 80042d6:	4604      	mov	r4, r0
 80042d8:	4608      	mov	r0, r1
 80042da:	602b      	str	r3, [r5, #0]
 80042dc:	f7ff fa8e 	bl	80037fc <_close>
 80042e0:	1c43      	adds	r3, r0, #1
 80042e2:	d102      	bne.n	80042ea <_close_r+0x1a>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	b103      	cbz	r3, 80042ea <_close_r+0x1a>
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	bd38      	pop	{r3, r4, r5, pc}
 80042ec:	2000049c 	.word	0x2000049c

080042f0 <__sflush_r>:
 80042f0:	898a      	ldrh	r2, [r1, #12]
 80042f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f6:	4605      	mov	r5, r0
 80042f8:	0710      	lsls	r0, r2, #28
 80042fa:	460c      	mov	r4, r1
 80042fc:	d458      	bmi.n	80043b0 <__sflush_r+0xc0>
 80042fe:	684b      	ldr	r3, [r1, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	dc05      	bgt.n	8004310 <__sflush_r+0x20>
 8004304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	dc02      	bgt.n	8004310 <__sflush_r+0x20>
 800430a:	2000      	movs	r0, #0
 800430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004312:	2e00      	cmp	r6, #0
 8004314:	d0f9      	beq.n	800430a <__sflush_r+0x1a>
 8004316:	2300      	movs	r3, #0
 8004318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800431c:	682f      	ldr	r7, [r5, #0]
 800431e:	602b      	str	r3, [r5, #0]
 8004320:	d032      	beq.n	8004388 <__sflush_r+0x98>
 8004322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	075a      	lsls	r2, r3, #29
 8004328:	d505      	bpl.n	8004336 <__sflush_r+0x46>
 800432a:	6863      	ldr	r3, [r4, #4]
 800432c:	1ac0      	subs	r0, r0, r3
 800432e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004330:	b10b      	cbz	r3, 8004336 <__sflush_r+0x46>
 8004332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004334:	1ac0      	subs	r0, r0, r3
 8004336:	2300      	movs	r3, #0
 8004338:	4602      	mov	r2, r0
 800433a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800433c:	6a21      	ldr	r1, [r4, #32]
 800433e:	4628      	mov	r0, r5
 8004340:	47b0      	blx	r6
 8004342:	1c43      	adds	r3, r0, #1
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	d106      	bne.n	8004356 <__sflush_r+0x66>
 8004348:	6829      	ldr	r1, [r5, #0]
 800434a:	291d      	cmp	r1, #29
 800434c:	d82c      	bhi.n	80043a8 <__sflush_r+0xb8>
 800434e:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <__sflush_r+0x108>)
 8004350:	40ca      	lsrs	r2, r1
 8004352:	07d6      	lsls	r6, r2, #31
 8004354:	d528      	bpl.n	80043a8 <__sflush_r+0xb8>
 8004356:	2200      	movs	r2, #0
 8004358:	6062      	str	r2, [r4, #4]
 800435a:	04d9      	lsls	r1, r3, #19
 800435c:	6922      	ldr	r2, [r4, #16]
 800435e:	6022      	str	r2, [r4, #0]
 8004360:	d504      	bpl.n	800436c <__sflush_r+0x7c>
 8004362:	1c42      	adds	r2, r0, #1
 8004364:	d101      	bne.n	800436a <__sflush_r+0x7a>
 8004366:	682b      	ldr	r3, [r5, #0]
 8004368:	b903      	cbnz	r3, 800436c <__sflush_r+0x7c>
 800436a:	6560      	str	r0, [r4, #84]	; 0x54
 800436c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800436e:	602f      	str	r7, [r5, #0]
 8004370:	2900      	cmp	r1, #0
 8004372:	d0ca      	beq.n	800430a <__sflush_r+0x1a>
 8004374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004378:	4299      	cmp	r1, r3
 800437a:	d002      	beq.n	8004382 <__sflush_r+0x92>
 800437c:	4628      	mov	r0, r5
 800437e:	f000 f8fd 	bl	800457c <_free_r>
 8004382:	2000      	movs	r0, #0
 8004384:	6360      	str	r0, [r4, #52]	; 0x34
 8004386:	e7c1      	b.n	800430c <__sflush_r+0x1c>
 8004388:	6a21      	ldr	r1, [r4, #32]
 800438a:	2301      	movs	r3, #1
 800438c:	4628      	mov	r0, r5
 800438e:	47b0      	blx	r6
 8004390:	1c41      	adds	r1, r0, #1
 8004392:	d1c7      	bne.n	8004324 <__sflush_r+0x34>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0c4      	beq.n	8004324 <__sflush_r+0x34>
 800439a:	2b1d      	cmp	r3, #29
 800439c:	d001      	beq.n	80043a2 <__sflush_r+0xb2>
 800439e:	2b16      	cmp	r3, #22
 80043a0:	d101      	bne.n	80043a6 <__sflush_r+0xb6>
 80043a2:	602f      	str	r7, [r5, #0]
 80043a4:	e7b1      	b.n	800430a <__sflush_r+0x1a>
 80043a6:	89a3      	ldrh	r3, [r4, #12]
 80043a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ac:	81a3      	strh	r3, [r4, #12]
 80043ae:	e7ad      	b.n	800430c <__sflush_r+0x1c>
 80043b0:	690f      	ldr	r7, [r1, #16]
 80043b2:	2f00      	cmp	r7, #0
 80043b4:	d0a9      	beq.n	800430a <__sflush_r+0x1a>
 80043b6:	0793      	lsls	r3, r2, #30
 80043b8:	680e      	ldr	r6, [r1, #0]
 80043ba:	bf08      	it	eq
 80043bc:	694b      	ldreq	r3, [r1, #20]
 80043be:	600f      	str	r7, [r1, #0]
 80043c0:	bf18      	it	ne
 80043c2:	2300      	movne	r3, #0
 80043c4:	eba6 0807 	sub.w	r8, r6, r7
 80043c8:	608b      	str	r3, [r1, #8]
 80043ca:	f1b8 0f00 	cmp.w	r8, #0
 80043ce:	dd9c      	ble.n	800430a <__sflush_r+0x1a>
 80043d0:	6a21      	ldr	r1, [r4, #32]
 80043d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043d4:	4643      	mov	r3, r8
 80043d6:	463a      	mov	r2, r7
 80043d8:	4628      	mov	r0, r5
 80043da:	47b0      	blx	r6
 80043dc:	2800      	cmp	r0, #0
 80043de:	dc06      	bgt.n	80043ee <__sflush_r+0xfe>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e6:	81a3      	strh	r3, [r4, #12]
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	e78e      	b.n	800430c <__sflush_r+0x1c>
 80043ee:	4407      	add	r7, r0
 80043f0:	eba8 0800 	sub.w	r8, r8, r0
 80043f4:	e7e9      	b.n	80043ca <__sflush_r+0xda>
 80043f6:	bf00      	nop
 80043f8:	20400001 	.word	0x20400001

080043fc <_fflush_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	690b      	ldr	r3, [r1, #16]
 8004400:	4605      	mov	r5, r0
 8004402:	460c      	mov	r4, r1
 8004404:	b913      	cbnz	r3, 800440c <_fflush_r+0x10>
 8004406:	2500      	movs	r5, #0
 8004408:	4628      	mov	r0, r5
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	b118      	cbz	r0, 8004416 <_fflush_r+0x1a>
 800440e:	6983      	ldr	r3, [r0, #24]
 8004410:	b90b      	cbnz	r3, 8004416 <_fflush_r+0x1a>
 8004412:	f7ff fc1b 	bl	8003c4c <__sinit>
 8004416:	4b14      	ldr	r3, [pc, #80]	; (8004468 <_fflush_r+0x6c>)
 8004418:	429c      	cmp	r4, r3
 800441a:	d11b      	bne.n	8004454 <_fflush_r+0x58>
 800441c:	686c      	ldr	r4, [r5, #4]
 800441e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ef      	beq.n	8004406 <_fflush_r+0xa>
 8004426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004428:	07d0      	lsls	r0, r2, #31
 800442a:	d404      	bmi.n	8004436 <_fflush_r+0x3a>
 800442c:	0599      	lsls	r1, r3, #22
 800442e:	d402      	bmi.n	8004436 <_fflush_r+0x3a>
 8004430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004432:	f7ff fcce 	bl	8003dd2 <__retarget_lock_acquire_recursive>
 8004436:	4628      	mov	r0, r5
 8004438:	4621      	mov	r1, r4
 800443a:	f7ff ff59 	bl	80042f0 <__sflush_r>
 800443e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004440:	07da      	lsls	r2, r3, #31
 8004442:	4605      	mov	r5, r0
 8004444:	d4e0      	bmi.n	8004408 <_fflush_r+0xc>
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	059b      	lsls	r3, r3, #22
 800444a:	d4dd      	bmi.n	8004408 <_fflush_r+0xc>
 800444c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800444e:	f7ff fcc1 	bl	8003dd4 <__retarget_lock_release_recursive>
 8004452:	e7d9      	b.n	8004408 <_fflush_r+0xc>
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <_fflush_r+0x70>)
 8004456:	429c      	cmp	r4, r3
 8004458:	d101      	bne.n	800445e <_fflush_r+0x62>
 800445a:	68ac      	ldr	r4, [r5, #8]
 800445c:	e7df      	b.n	800441e <_fflush_r+0x22>
 800445e:	4b04      	ldr	r3, [pc, #16]	; (8004470 <_fflush_r+0x74>)
 8004460:	429c      	cmp	r4, r3
 8004462:	bf08      	it	eq
 8004464:	68ec      	ldreq	r4, [r5, #12]
 8004466:	e7da      	b.n	800441e <_fflush_r+0x22>
 8004468:	08005298 	.word	0x08005298
 800446c:	080052b8 	.word	0x080052b8
 8004470:	08005278 	.word	0x08005278

08004474 <_lseek_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4d07      	ldr	r5, [pc, #28]	; (8004494 <_lseek_r+0x20>)
 8004478:	4604      	mov	r4, r0
 800447a:	4608      	mov	r0, r1
 800447c:	4611      	mov	r1, r2
 800447e:	2200      	movs	r2, #0
 8004480:	602a      	str	r2, [r5, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	f7ff f977 	bl	8003776 <_lseek>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	d102      	bne.n	8004492 <_lseek_r+0x1e>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	b103      	cbz	r3, 8004492 <_lseek_r+0x1e>
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	bd38      	pop	{r3, r4, r5, pc}
 8004494:	2000049c 	.word	0x2000049c

08004498 <__swhatbuf_r>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	460e      	mov	r6, r1
 800449c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a0:	2900      	cmp	r1, #0
 80044a2:	b096      	sub	sp, #88	; 0x58
 80044a4:	4614      	mov	r4, r2
 80044a6:	461d      	mov	r5, r3
 80044a8:	da08      	bge.n	80044bc <__swhatbuf_r+0x24>
 80044aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	602a      	str	r2, [r5, #0]
 80044b2:	061a      	lsls	r2, r3, #24
 80044b4:	d410      	bmi.n	80044d8 <__swhatbuf_r+0x40>
 80044b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ba:	e00e      	b.n	80044da <__swhatbuf_r+0x42>
 80044bc:	466a      	mov	r2, sp
 80044be:	f000 fbab 	bl	8004c18 <_fstat_r>
 80044c2:	2800      	cmp	r0, #0
 80044c4:	dbf1      	blt.n	80044aa <__swhatbuf_r+0x12>
 80044c6:	9a01      	ldr	r2, [sp, #4]
 80044c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044d0:	425a      	negs	r2, r3
 80044d2:	415a      	adcs	r2, r3
 80044d4:	602a      	str	r2, [r5, #0]
 80044d6:	e7ee      	b.n	80044b6 <__swhatbuf_r+0x1e>
 80044d8:	2340      	movs	r3, #64	; 0x40
 80044da:	2000      	movs	r0, #0
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	b016      	add	sp, #88	; 0x58
 80044e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080044e4 <__smakebuf_r>:
 80044e4:	898b      	ldrh	r3, [r1, #12]
 80044e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044e8:	079d      	lsls	r5, r3, #30
 80044ea:	4606      	mov	r6, r0
 80044ec:	460c      	mov	r4, r1
 80044ee:	d507      	bpl.n	8004500 <__smakebuf_r+0x1c>
 80044f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	6123      	str	r3, [r4, #16]
 80044f8:	2301      	movs	r3, #1
 80044fa:	6163      	str	r3, [r4, #20]
 80044fc:	b002      	add	sp, #8
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	ab01      	add	r3, sp, #4
 8004502:	466a      	mov	r2, sp
 8004504:	f7ff ffc8 	bl	8004498 <__swhatbuf_r>
 8004508:	9900      	ldr	r1, [sp, #0]
 800450a:	4605      	mov	r5, r0
 800450c:	4630      	mov	r0, r6
 800450e:	f7ff fc99 	bl	8003e44 <_malloc_r>
 8004512:	b948      	cbnz	r0, 8004528 <__smakebuf_r+0x44>
 8004514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004518:	059a      	lsls	r2, r3, #22
 800451a:	d4ef      	bmi.n	80044fc <__smakebuf_r+0x18>
 800451c:	f023 0303 	bic.w	r3, r3, #3
 8004520:	f043 0302 	orr.w	r3, r3, #2
 8004524:	81a3      	strh	r3, [r4, #12]
 8004526:	e7e3      	b.n	80044f0 <__smakebuf_r+0xc>
 8004528:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <__smakebuf_r+0x7c>)
 800452a:	62b3      	str	r3, [r6, #40]	; 0x28
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	6020      	str	r0, [r4, #0]
 8004530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004534:	81a3      	strh	r3, [r4, #12]
 8004536:	9b00      	ldr	r3, [sp, #0]
 8004538:	6163      	str	r3, [r4, #20]
 800453a:	9b01      	ldr	r3, [sp, #4]
 800453c:	6120      	str	r0, [r4, #16]
 800453e:	b15b      	cbz	r3, 8004558 <__smakebuf_r+0x74>
 8004540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004544:	4630      	mov	r0, r6
 8004546:	f000 fb79 	bl	8004c3c <_isatty_r>
 800454a:	b128      	cbz	r0, 8004558 <__smakebuf_r+0x74>
 800454c:	89a3      	ldrh	r3, [r4, #12]
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	81a3      	strh	r3, [r4, #12]
 8004558:	89a0      	ldrh	r0, [r4, #12]
 800455a:	4305      	orrs	r5, r0
 800455c:	81a5      	strh	r5, [r4, #12]
 800455e:	e7cd      	b.n	80044fc <__smakebuf_r+0x18>
 8004560:	08003be5 	.word	0x08003be5

08004564 <__malloc_lock>:
 8004564:	4801      	ldr	r0, [pc, #4]	; (800456c <__malloc_lock+0x8>)
 8004566:	f7ff bc34 	b.w	8003dd2 <__retarget_lock_acquire_recursive>
 800456a:	bf00      	nop
 800456c:	20000490 	.word	0x20000490

08004570 <__malloc_unlock>:
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <__malloc_unlock+0x8>)
 8004572:	f7ff bc2f 	b.w	8003dd4 <__retarget_lock_release_recursive>
 8004576:	bf00      	nop
 8004578:	20000490 	.word	0x20000490

0800457c <_free_r>:
 800457c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800457e:	2900      	cmp	r1, #0
 8004580:	d044      	beq.n	800460c <_free_r+0x90>
 8004582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004586:	9001      	str	r0, [sp, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f1a1 0404 	sub.w	r4, r1, #4
 800458e:	bfb8      	it	lt
 8004590:	18e4      	addlt	r4, r4, r3
 8004592:	f7ff ffe7 	bl	8004564 <__malloc_lock>
 8004596:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <_free_r+0x94>)
 8004598:	9801      	ldr	r0, [sp, #4]
 800459a:	6813      	ldr	r3, [r2, #0]
 800459c:	b933      	cbnz	r3, 80045ac <_free_r+0x30>
 800459e:	6063      	str	r3, [r4, #4]
 80045a0:	6014      	str	r4, [r2, #0]
 80045a2:	b003      	add	sp, #12
 80045a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045a8:	f7ff bfe2 	b.w	8004570 <__malloc_unlock>
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	d908      	bls.n	80045c2 <_free_r+0x46>
 80045b0:	6825      	ldr	r5, [r4, #0]
 80045b2:	1961      	adds	r1, r4, r5
 80045b4:	428b      	cmp	r3, r1
 80045b6:	bf01      	itttt	eq
 80045b8:	6819      	ldreq	r1, [r3, #0]
 80045ba:	685b      	ldreq	r3, [r3, #4]
 80045bc:	1949      	addeq	r1, r1, r5
 80045be:	6021      	streq	r1, [r4, #0]
 80045c0:	e7ed      	b.n	800459e <_free_r+0x22>
 80045c2:	461a      	mov	r2, r3
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	b10b      	cbz	r3, 80045cc <_free_r+0x50>
 80045c8:	42a3      	cmp	r3, r4
 80045ca:	d9fa      	bls.n	80045c2 <_free_r+0x46>
 80045cc:	6811      	ldr	r1, [r2, #0]
 80045ce:	1855      	adds	r5, r2, r1
 80045d0:	42a5      	cmp	r5, r4
 80045d2:	d10b      	bne.n	80045ec <_free_r+0x70>
 80045d4:	6824      	ldr	r4, [r4, #0]
 80045d6:	4421      	add	r1, r4
 80045d8:	1854      	adds	r4, r2, r1
 80045da:	42a3      	cmp	r3, r4
 80045dc:	6011      	str	r1, [r2, #0]
 80045de:	d1e0      	bne.n	80045a2 <_free_r+0x26>
 80045e0:	681c      	ldr	r4, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	6053      	str	r3, [r2, #4]
 80045e6:	4421      	add	r1, r4
 80045e8:	6011      	str	r1, [r2, #0]
 80045ea:	e7da      	b.n	80045a2 <_free_r+0x26>
 80045ec:	d902      	bls.n	80045f4 <_free_r+0x78>
 80045ee:	230c      	movs	r3, #12
 80045f0:	6003      	str	r3, [r0, #0]
 80045f2:	e7d6      	b.n	80045a2 <_free_r+0x26>
 80045f4:	6825      	ldr	r5, [r4, #0]
 80045f6:	1961      	adds	r1, r4, r5
 80045f8:	428b      	cmp	r3, r1
 80045fa:	bf04      	itt	eq
 80045fc:	6819      	ldreq	r1, [r3, #0]
 80045fe:	685b      	ldreq	r3, [r3, #4]
 8004600:	6063      	str	r3, [r4, #4]
 8004602:	bf04      	itt	eq
 8004604:	1949      	addeq	r1, r1, r5
 8004606:	6021      	streq	r1, [r4, #0]
 8004608:	6054      	str	r4, [r2, #4]
 800460a:	e7ca      	b.n	80045a2 <_free_r+0x26>
 800460c:	b003      	add	sp, #12
 800460e:	bd30      	pop	{r4, r5, pc}
 8004610:	20000494 	.word	0x20000494

08004614 <__ssputs_r>:
 8004614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004618:	688e      	ldr	r6, [r1, #8]
 800461a:	429e      	cmp	r6, r3
 800461c:	4682      	mov	sl, r0
 800461e:	460c      	mov	r4, r1
 8004620:	4690      	mov	r8, r2
 8004622:	461f      	mov	r7, r3
 8004624:	d838      	bhi.n	8004698 <__ssputs_r+0x84>
 8004626:	898a      	ldrh	r2, [r1, #12]
 8004628:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800462c:	d032      	beq.n	8004694 <__ssputs_r+0x80>
 800462e:	6825      	ldr	r5, [r4, #0]
 8004630:	6909      	ldr	r1, [r1, #16]
 8004632:	eba5 0901 	sub.w	r9, r5, r1
 8004636:	6965      	ldr	r5, [r4, #20]
 8004638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800463c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004640:	3301      	adds	r3, #1
 8004642:	444b      	add	r3, r9
 8004644:	106d      	asrs	r5, r5, #1
 8004646:	429d      	cmp	r5, r3
 8004648:	bf38      	it	cc
 800464a:	461d      	movcc	r5, r3
 800464c:	0553      	lsls	r3, r2, #21
 800464e:	d531      	bpl.n	80046b4 <__ssputs_r+0xa0>
 8004650:	4629      	mov	r1, r5
 8004652:	f7ff fbf7 	bl	8003e44 <_malloc_r>
 8004656:	4606      	mov	r6, r0
 8004658:	b950      	cbnz	r0, 8004670 <__ssputs_r+0x5c>
 800465a:	230c      	movs	r3, #12
 800465c:	f8ca 3000 	str.w	r3, [sl]
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004666:	81a3      	strh	r3, [r4, #12]
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004670:	6921      	ldr	r1, [r4, #16]
 8004672:	464a      	mov	r2, r9
 8004674:	f7ff fbaf 	bl	8003dd6 <memcpy>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800467e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004682:	81a3      	strh	r3, [r4, #12]
 8004684:	6126      	str	r6, [r4, #16]
 8004686:	6165      	str	r5, [r4, #20]
 8004688:	444e      	add	r6, r9
 800468a:	eba5 0509 	sub.w	r5, r5, r9
 800468e:	6026      	str	r6, [r4, #0]
 8004690:	60a5      	str	r5, [r4, #8]
 8004692:	463e      	mov	r6, r7
 8004694:	42be      	cmp	r6, r7
 8004696:	d900      	bls.n	800469a <__ssputs_r+0x86>
 8004698:	463e      	mov	r6, r7
 800469a:	6820      	ldr	r0, [r4, #0]
 800469c:	4632      	mov	r2, r6
 800469e:	4641      	mov	r1, r8
 80046a0:	f000 fadc 	bl	8004c5c <memmove>
 80046a4:	68a3      	ldr	r3, [r4, #8]
 80046a6:	1b9b      	subs	r3, r3, r6
 80046a8:	60a3      	str	r3, [r4, #8]
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	4433      	add	r3, r6
 80046ae:	6023      	str	r3, [r4, #0]
 80046b0:	2000      	movs	r0, #0
 80046b2:	e7db      	b.n	800466c <__ssputs_r+0x58>
 80046b4:	462a      	mov	r2, r5
 80046b6:	f000 faeb 	bl	8004c90 <_realloc_r>
 80046ba:	4606      	mov	r6, r0
 80046bc:	2800      	cmp	r0, #0
 80046be:	d1e1      	bne.n	8004684 <__ssputs_r+0x70>
 80046c0:	6921      	ldr	r1, [r4, #16]
 80046c2:	4650      	mov	r0, sl
 80046c4:	f7ff ff5a 	bl	800457c <_free_r>
 80046c8:	e7c7      	b.n	800465a <__ssputs_r+0x46>
	...

080046cc <_svfiprintf_r>:
 80046cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d0:	4698      	mov	r8, r3
 80046d2:	898b      	ldrh	r3, [r1, #12]
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	b09d      	sub	sp, #116	; 0x74
 80046d8:	4607      	mov	r7, r0
 80046da:	460d      	mov	r5, r1
 80046dc:	4614      	mov	r4, r2
 80046de:	d50e      	bpl.n	80046fe <_svfiprintf_r+0x32>
 80046e0:	690b      	ldr	r3, [r1, #16]
 80046e2:	b963      	cbnz	r3, 80046fe <_svfiprintf_r+0x32>
 80046e4:	2140      	movs	r1, #64	; 0x40
 80046e6:	f7ff fbad 	bl	8003e44 <_malloc_r>
 80046ea:	6028      	str	r0, [r5, #0]
 80046ec:	6128      	str	r0, [r5, #16]
 80046ee:	b920      	cbnz	r0, 80046fa <_svfiprintf_r+0x2e>
 80046f0:	230c      	movs	r3, #12
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	e0d1      	b.n	800489e <_svfiprintf_r+0x1d2>
 80046fa:	2340      	movs	r3, #64	; 0x40
 80046fc:	616b      	str	r3, [r5, #20]
 80046fe:	2300      	movs	r3, #0
 8004700:	9309      	str	r3, [sp, #36]	; 0x24
 8004702:	2320      	movs	r3, #32
 8004704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004708:	f8cd 800c 	str.w	r8, [sp, #12]
 800470c:	2330      	movs	r3, #48	; 0x30
 800470e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048b8 <_svfiprintf_r+0x1ec>
 8004712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004716:	f04f 0901 	mov.w	r9, #1
 800471a:	4623      	mov	r3, r4
 800471c:	469a      	mov	sl, r3
 800471e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004722:	b10a      	cbz	r2, 8004728 <_svfiprintf_r+0x5c>
 8004724:	2a25      	cmp	r2, #37	; 0x25
 8004726:	d1f9      	bne.n	800471c <_svfiprintf_r+0x50>
 8004728:	ebba 0b04 	subs.w	fp, sl, r4
 800472c:	d00b      	beq.n	8004746 <_svfiprintf_r+0x7a>
 800472e:	465b      	mov	r3, fp
 8004730:	4622      	mov	r2, r4
 8004732:	4629      	mov	r1, r5
 8004734:	4638      	mov	r0, r7
 8004736:	f7ff ff6d 	bl	8004614 <__ssputs_r>
 800473a:	3001      	adds	r0, #1
 800473c:	f000 80aa 	beq.w	8004894 <_svfiprintf_r+0x1c8>
 8004740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004742:	445a      	add	r2, fp
 8004744:	9209      	str	r2, [sp, #36]	; 0x24
 8004746:	f89a 3000 	ldrb.w	r3, [sl]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80a2 	beq.w	8004894 <_svfiprintf_r+0x1c8>
 8004750:	2300      	movs	r3, #0
 8004752:	f04f 32ff 	mov.w	r2, #4294967295
 8004756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800475a:	f10a 0a01 	add.w	sl, sl, #1
 800475e:	9304      	str	r3, [sp, #16]
 8004760:	9307      	str	r3, [sp, #28]
 8004762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004766:	931a      	str	r3, [sp, #104]	; 0x68
 8004768:	4654      	mov	r4, sl
 800476a:	2205      	movs	r2, #5
 800476c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004770:	4851      	ldr	r0, [pc, #324]	; (80048b8 <_svfiprintf_r+0x1ec>)
 8004772:	f7fb fd35 	bl	80001e0 <memchr>
 8004776:	9a04      	ldr	r2, [sp, #16]
 8004778:	b9d8      	cbnz	r0, 80047b2 <_svfiprintf_r+0xe6>
 800477a:	06d0      	lsls	r0, r2, #27
 800477c:	bf44      	itt	mi
 800477e:	2320      	movmi	r3, #32
 8004780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004784:	0711      	lsls	r1, r2, #28
 8004786:	bf44      	itt	mi
 8004788:	232b      	movmi	r3, #43	; 0x2b
 800478a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800478e:	f89a 3000 	ldrb.w	r3, [sl]
 8004792:	2b2a      	cmp	r3, #42	; 0x2a
 8004794:	d015      	beq.n	80047c2 <_svfiprintf_r+0xf6>
 8004796:	9a07      	ldr	r2, [sp, #28]
 8004798:	4654      	mov	r4, sl
 800479a:	2000      	movs	r0, #0
 800479c:	f04f 0c0a 	mov.w	ip, #10
 80047a0:	4621      	mov	r1, r4
 80047a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047a6:	3b30      	subs	r3, #48	; 0x30
 80047a8:	2b09      	cmp	r3, #9
 80047aa:	d94e      	bls.n	800484a <_svfiprintf_r+0x17e>
 80047ac:	b1b0      	cbz	r0, 80047dc <_svfiprintf_r+0x110>
 80047ae:	9207      	str	r2, [sp, #28]
 80047b0:	e014      	b.n	80047dc <_svfiprintf_r+0x110>
 80047b2:	eba0 0308 	sub.w	r3, r0, r8
 80047b6:	fa09 f303 	lsl.w	r3, r9, r3
 80047ba:	4313      	orrs	r3, r2
 80047bc:	9304      	str	r3, [sp, #16]
 80047be:	46a2      	mov	sl, r4
 80047c0:	e7d2      	b.n	8004768 <_svfiprintf_r+0x9c>
 80047c2:	9b03      	ldr	r3, [sp, #12]
 80047c4:	1d19      	adds	r1, r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	9103      	str	r1, [sp, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bfbb      	ittet	lt
 80047ce:	425b      	neglt	r3, r3
 80047d0:	f042 0202 	orrlt.w	r2, r2, #2
 80047d4:	9307      	strge	r3, [sp, #28]
 80047d6:	9307      	strlt	r3, [sp, #28]
 80047d8:	bfb8      	it	lt
 80047da:	9204      	strlt	r2, [sp, #16]
 80047dc:	7823      	ldrb	r3, [r4, #0]
 80047de:	2b2e      	cmp	r3, #46	; 0x2e
 80047e0:	d10c      	bne.n	80047fc <_svfiprintf_r+0x130>
 80047e2:	7863      	ldrb	r3, [r4, #1]
 80047e4:	2b2a      	cmp	r3, #42	; 0x2a
 80047e6:	d135      	bne.n	8004854 <_svfiprintf_r+0x188>
 80047e8:	9b03      	ldr	r3, [sp, #12]
 80047ea:	1d1a      	adds	r2, r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	9203      	str	r2, [sp, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bfb8      	it	lt
 80047f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80047f8:	3402      	adds	r4, #2
 80047fa:	9305      	str	r3, [sp, #20]
 80047fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048c8 <_svfiprintf_r+0x1fc>
 8004800:	7821      	ldrb	r1, [r4, #0]
 8004802:	2203      	movs	r2, #3
 8004804:	4650      	mov	r0, sl
 8004806:	f7fb fceb 	bl	80001e0 <memchr>
 800480a:	b140      	cbz	r0, 800481e <_svfiprintf_r+0x152>
 800480c:	2340      	movs	r3, #64	; 0x40
 800480e:	eba0 000a 	sub.w	r0, r0, sl
 8004812:	fa03 f000 	lsl.w	r0, r3, r0
 8004816:	9b04      	ldr	r3, [sp, #16]
 8004818:	4303      	orrs	r3, r0
 800481a:	3401      	adds	r4, #1
 800481c:	9304      	str	r3, [sp, #16]
 800481e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004822:	4826      	ldr	r0, [pc, #152]	; (80048bc <_svfiprintf_r+0x1f0>)
 8004824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004828:	2206      	movs	r2, #6
 800482a:	f7fb fcd9 	bl	80001e0 <memchr>
 800482e:	2800      	cmp	r0, #0
 8004830:	d038      	beq.n	80048a4 <_svfiprintf_r+0x1d8>
 8004832:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <_svfiprintf_r+0x1f4>)
 8004834:	bb1b      	cbnz	r3, 800487e <_svfiprintf_r+0x1b2>
 8004836:	9b03      	ldr	r3, [sp, #12]
 8004838:	3307      	adds	r3, #7
 800483a:	f023 0307 	bic.w	r3, r3, #7
 800483e:	3308      	adds	r3, #8
 8004840:	9303      	str	r3, [sp, #12]
 8004842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004844:	4433      	add	r3, r6
 8004846:	9309      	str	r3, [sp, #36]	; 0x24
 8004848:	e767      	b.n	800471a <_svfiprintf_r+0x4e>
 800484a:	fb0c 3202 	mla	r2, ip, r2, r3
 800484e:	460c      	mov	r4, r1
 8004850:	2001      	movs	r0, #1
 8004852:	e7a5      	b.n	80047a0 <_svfiprintf_r+0xd4>
 8004854:	2300      	movs	r3, #0
 8004856:	3401      	adds	r4, #1
 8004858:	9305      	str	r3, [sp, #20]
 800485a:	4619      	mov	r1, r3
 800485c:	f04f 0c0a 	mov.w	ip, #10
 8004860:	4620      	mov	r0, r4
 8004862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004866:	3a30      	subs	r2, #48	; 0x30
 8004868:	2a09      	cmp	r2, #9
 800486a:	d903      	bls.n	8004874 <_svfiprintf_r+0x1a8>
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0c5      	beq.n	80047fc <_svfiprintf_r+0x130>
 8004870:	9105      	str	r1, [sp, #20]
 8004872:	e7c3      	b.n	80047fc <_svfiprintf_r+0x130>
 8004874:	fb0c 2101 	mla	r1, ip, r1, r2
 8004878:	4604      	mov	r4, r0
 800487a:	2301      	movs	r3, #1
 800487c:	e7f0      	b.n	8004860 <_svfiprintf_r+0x194>
 800487e:	ab03      	add	r3, sp, #12
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	462a      	mov	r2, r5
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <_svfiprintf_r+0x1f8>)
 8004886:	a904      	add	r1, sp, #16
 8004888:	4638      	mov	r0, r7
 800488a:	f3af 8000 	nop.w
 800488e:	1c42      	adds	r2, r0, #1
 8004890:	4606      	mov	r6, r0
 8004892:	d1d6      	bne.n	8004842 <_svfiprintf_r+0x176>
 8004894:	89ab      	ldrh	r3, [r5, #12]
 8004896:	065b      	lsls	r3, r3, #25
 8004898:	f53f af2c 	bmi.w	80046f4 <_svfiprintf_r+0x28>
 800489c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800489e:	b01d      	add	sp, #116	; 0x74
 80048a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a4:	ab03      	add	r3, sp, #12
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	462a      	mov	r2, r5
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <_svfiprintf_r+0x1f8>)
 80048ac:	a904      	add	r1, sp, #16
 80048ae:	4638      	mov	r0, r7
 80048b0:	f000 f87a 	bl	80049a8 <_printf_i>
 80048b4:	e7eb      	b.n	800488e <_svfiprintf_r+0x1c2>
 80048b6:	bf00      	nop
 80048b8:	080052dc 	.word	0x080052dc
 80048bc:	080052e6 	.word	0x080052e6
 80048c0:	00000000 	.word	0x00000000
 80048c4:	08004615 	.word	0x08004615
 80048c8:	080052e2 	.word	0x080052e2

080048cc <_printf_common>:
 80048cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	4616      	mov	r6, r2
 80048d2:	4699      	mov	r9, r3
 80048d4:	688a      	ldr	r2, [r1, #8]
 80048d6:	690b      	ldr	r3, [r1, #16]
 80048d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048dc:	4293      	cmp	r3, r2
 80048de:	bfb8      	it	lt
 80048e0:	4613      	movlt	r3, r2
 80048e2:	6033      	str	r3, [r6, #0]
 80048e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048e8:	4607      	mov	r7, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	b10a      	cbz	r2, 80048f2 <_printf_common+0x26>
 80048ee:	3301      	adds	r3, #1
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	0699      	lsls	r1, r3, #26
 80048f6:	bf42      	ittt	mi
 80048f8:	6833      	ldrmi	r3, [r6, #0]
 80048fa:	3302      	addmi	r3, #2
 80048fc:	6033      	strmi	r3, [r6, #0]
 80048fe:	6825      	ldr	r5, [r4, #0]
 8004900:	f015 0506 	ands.w	r5, r5, #6
 8004904:	d106      	bne.n	8004914 <_printf_common+0x48>
 8004906:	f104 0a19 	add.w	sl, r4, #25
 800490a:	68e3      	ldr	r3, [r4, #12]
 800490c:	6832      	ldr	r2, [r6, #0]
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	42ab      	cmp	r3, r5
 8004912:	dc26      	bgt.n	8004962 <_printf_common+0x96>
 8004914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004918:	1e13      	subs	r3, r2, #0
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	bf18      	it	ne
 800491e:	2301      	movne	r3, #1
 8004920:	0692      	lsls	r2, r2, #26
 8004922:	d42b      	bmi.n	800497c <_printf_common+0xb0>
 8004924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004928:	4649      	mov	r1, r9
 800492a:	4638      	mov	r0, r7
 800492c:	47c0      	blx	r8
 800492e:	3001      	adds	r0, #1
 8004930:	d01e      	beq.n	8004970 <_printf_common+0xa4>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	68e5      	ldr	r5, [r4, #12]
 8004936:	6832      	ldr	r2, [r6, #0]
 8004938:	f003 0306 	and.w	r3, r3, #6
 800493c:	2b04      	cmp	r3, #4
 800493e:	bf08      	it	eq
 8004940:	1aad      	subeq	r5, r5, r2
 8004942:	68a3      	ldr	r3, [r4, #8]
 8004944:	6922      	ldr	r2, [r4, #16]
 8004946:	bf0c      	ite	eq
 8004948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800494c:	2500      	movne	r5, #0
 800494e:	4293      	cmp	r3, r2
 8004950:	bfc4      	itt	gt
 8004952:	1a9b      	subgt	r3, r3, r2
 8004954:	18ed      	addgt	r5, r5, r3
 8004956:	2600      	movs	r6, #0
 8004958:	341a      	adds	r4, #26
 800495a:	42b5      	cmp	r5, r6
 800495c:	d11a      	bne.n	8004994 <_printf_common+0xc8>
 800495e:	2000      	movs	r0, #0
 8004960:	e008      	b.n	8004974 <_printf_common+0xa8>
 8004962:	2301      	movs	r3, #1
 8004964:	4652      	mov	r2, sl
 8004966:	4649      	mov	r1, r9
 8004968:	4638      	mov	r0, r7
 800496a:	47c0      	blx	r8
 800496c:	3001      	adds	r0, #1
 800496e:	d103      	bne.n	8004978 <_printf_common+0xac>
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004978:	3501      	adds	r5, #1
 800497a:	e7c6      	b.n	800490a <_printf_common+0x3e>
 800497c:	18e1      	adds	r1, r4, r3
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	2030      	movs	r0, #48	; 0x30
 8004982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004986:	4422      	add	r2, r4
 8004988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800498c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004990:	3302      	adds	r3, #2
 8004992:	e7c7      	b.n	8004924 <_printf_common+0x58>
 8004994:	2301      	movs	r3, #1
 8004996:	4622      	mov	r2, r4
 8004998:	4649      	mov	r1, r9
 800499a:	4638      	mov	r0, r7
 800499c:	47c0      	blx	r8
 800499e:	3001      	adds	r0, #1
 80049a0:	d0e6      	beq.n	8004970 <_printf_common+0xa4>
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7d9      	b.n	800495a <_printf_common+0x8e>
	...

080049a8 <_printf_i>:
 80049a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	7e0f      	ldrb	r7, [r1, #24]
 80049ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049b0:	2f78      	cmp	r7, #120	; 0x78
 80049b2:	4691      	mov	r9, r2
 80049b4:	4680      	mov	r8, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	469a      	mov	sl, r3
 80049ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049be:	d807      	bhi.n	80049d0 <_printf_i+0x28>
 80049c0:	2f62      	cmp	r7, #98	; 0x62
 80049c2:	d80a      	bhi.n	80049da <_printf_i+0x32>
 80049c4:	2f00      	cmp	r7, #0
 80049c6:	f000 80d8 	beq.w	8004b7a <_printf_i+0x1d2>
 80049ca:	2f58      	cmp	r7, #88	; 0x58
 80049cc:	f000 80a3 	beq.w	8004b16 <_printf_i+0x16e>
 80049d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049d8:	e03a      	b.n	8004a50 <_printf_i+0xa8>
 80049da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049de:	2b15      	cmp	r3, #21
 80049e0:	d8f6      	bhi.n	80049d0 <_printf_i+0x28>
 80049e2:	a101      	add	r1, pc, #4	; (adr r1, 80049e8 <_printf_i+0x40>)
 80049e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a55 	.word	0x08004a55
 80049f0:	080049d1 	.word	0x080049d1
 80049f4:	080049d1 	.word	0x080049d1
 80049f8:	080049d1 	.word	0x080049d1
 80049fc:	080049d1 	.word	0x080049d1
 8004a00:	08004a55 	.word	0x08004a55
 8004a04:	080049d1 	.word	0x080049d1
 8004a08:	080049d1 	.word	0x080049d1
 8004a0c:	080049d1 	.word	0x080049d1
 8004a10:	080049d1 	.word	0x080049d1
 8004a14:	08004b61 	.word	0x08004b61
 8004a18:	08004a85 	.word	0x08004a85
 8004a1c:	08004b43 	.word	0x08004b43
 8004a20:	080049d1 	.word	0x080049d1
 8004a24:	080049d1 	.word	0x080049d1
 8004a28:	08004b83 	.word	0x08004b83
 8004a2c:	080049d1 	.word	0x080049d1
 8004a30:	08004a85 	.word	0x08004a85
 8004a34:	080049d1 	.word	0x080049d1
 8004a38:	080049d1 	.word	0x080049d1
 8004a3c:	08004b4b 	.word	0x08004b4b
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	602a      	str	r2, [r5, #0]
 8004a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0a3      	b.n	8004b9c <_printf_i+0x1f4>
 8004a54:	6820      	ldr	r0, [r4, #0]
 8004a56:	6829      	ldr	r1, [r5, #0]
 8004a58:	0606      	lsls	r6, r0, #24
 8004a5a:	f101 0304 	add.w	r3, r1, #4
 8004a5e:	d50a      	bpl.n	8004a76 <_printf_i+0xce>
 8004a60:	680e      	ldr	r6, [r1, #0]
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	2e00      	cmp	r6, #0
 8004a66:	da03      	bge.n	8004a70 <_printf_i+0xc8>
 8004a68:	232d      	movs	r3, #45	; 0x2d
 8004a6a:	4276      	negs	r6, r6
 8004a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a70:	485e      	ldr	r0, [pc, #376]	; (8004bec <_printf_i+0x244>)
 8004a72:	230a      	movs	r3, #10
 8004a74:	e019      	b.n	8004aaa <_printf_i+0x102>
 8004a76:	680e      	ldr	r6, [r1, #0]
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a7e:	bf18      	it	ne
 8004a80:	b236      	sxthne	r6, r6
 8004a82:	e7ef      	b.n	8004a64 <_printf_i+0xbc>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	6820      	ldr	r0, [r4, #0]
 8004a88:	1d19      	adds	r1, r3, #4
 8004a8a:	6029      	str	r1, [r5, #0]
 8004a8c:	0601      	lsls	r1, r0, #24
 8004a8e:	d501      	bpl.n	8004a94 <_printf_i+0xec>
 8004a90:	681e      	ldr	r6, [r3, #0]
 8004a92:	e002      	b.n	8004a9a <_printf_i+0xf2>
 8004a94:	0646      	lsls	r6, r0, #25
 8004a96:	d5fb      	bpl.n	8004a90 <_printf_i+0xe8>
 8004a98:	881e      	ldrh	r6, [r3, #0]
 8004a9a:	4854      	ldr	r0, [pc, #336]	; (8004bec <_printf_i+0x244>)
 8004a9c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2308      	moveq	r3, #8
 8004aa2:	230a      	movne	r3, #10
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aaa:	6865      	ldr	r5, [r4, #4]
 8004aac:	60a5      	str	r5, [r4, #8]
 8004aae:	2d00      	cmp	r5, #0
 8004ab0:	bfa2      	ittt	ge
 8004ab2:	6821      	ldrge	r1, [r4, #0]
 8004ab4:	f021 0104 	bicge.w	r1, r1, #4
 8004ab8:	6021      	strge	r1, [r4, #0]
 8004aba:	b90e      	cbnz	r6, 8004ac0 <_printf_i+0x118>
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	d04d      	beq.n	8004b5c <_printf_i+0x1b4>
 8004ac0:	4615      	mov	r5, r2
 8004ac2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ac6:	fb03 6711 	mls	r7, r3, r1, r6
 8004aca:	5dc7      	ldrb	r7, [r0, r7]
 8004acc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ad0:	4637      	mov	r7, r6
 8004ad2:	42bb      	cmp	r3, r7
 8004ad4:	460e      	mov	r6, r1
 8004ad6:	d9f4      	bls.n	8004ac2 <_printf_i+0x11a>
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d10b      	bne.n	8004af4 <_printf_i+0x14c>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	07de      	lsls	r6, r3, #31
 8004ae0:	d508      	bpl.n	8004af4 <_printf_i+0x14c>
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	6861      	ldr	r1, [r4, #4]
 8004ae6:	4299      	cmp	r1, r3
 8004ae8:	bfde      	ittt	le
 8004aea:	2330      	movle	r3, #48	; 0x30
 8004aec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004af0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004af4:	1b52      	subs	r2, r2, r5
 8004af6:	6122      	str	r2, [r4, #16]
 8004af8:	f8cd a000 	str.w	sl, [sp]
 8004afc:	464b      	mov	r3, r9
 8004afe:	aa03      	add	r2, sp, #12
 8004b00:	4621      	mov	r1, r4
 8004b02:	4640      	mov	r0, r8
 8004b04:	f7ff fee2 	bl	80048cc <_printf_common>
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d14c      	bne.n	8004ba6 <_printf_i+0x1fe>
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	b004      	add	sp, #16
 8004b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b16:	4835      	ldr	r0, [pc, #212]	; (8004bec <_printf_i+0x244>)
 8004b18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b1c:	6829      	ldr	r1, [r5, #0]
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b24:	6029      	str	r1, [r5, #0]
 8004b26:	061d      	lsls	r5, r3, #24
 8004b28:	d514      	bpl.n	8004b54 <_printf_i+0x1ac>
 8004b2a:	07df      	lsls	r7, r3, #31
 8004b2c:	bf44      	itt	mi
 8004b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b32:	6023      	strmi	r3, [r4, #0]
 8004b34:	b91e      	cbnz	r6, 8004b3e <_printf_i+0x196>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	f023 0320 	bic.w	r3, r3, #32
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	2310      	movs	r3, #16
 8004b40:	e7b0      	b.n	8004aa4 <_printf_i+0xfc>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	f043 0320 	orr.w	r3, r3, #32
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	2378      	movs	r3, #120	; 0x78
 8004b4c:	4828      	ldr	r0, [pc, #160]	; (8004bf0 <_printf_i+0x248>)
 8004b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b52:	e7e3      	b.n	8004b1c <_printf_i+0x174>
 8004b54:	0659      	lsls	r1, r3, #25
 8004b56:	bf48      	it	mi
 8004b58:	b2b6      	uxthmi	r6, r6
 8004b5a:	e7e6      	b.n	8004b2a <_printf_i+0x182>
 8004b5c:	4615      	mov	r5, r2
 8004b5e:	e7bb      	b.n	8004ad8 <_printf_i+0x130>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	6826      	ldr	r6, [r4, #0]
 8004b64:	6961      	ldr	r1, [r4, #20]
 8004b66:	1d18      	adds	r0, r3, #4
 8004b68:	6028      	str	r0, [r5, #0]
 8004b6a:	0635      	lsls	r5, r6, #24
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	d501      	bpl.n	8004b74 <_printf_i+0x1cc>
 8004b70:	6019      	str	r1, [r3, #0]
 8004b72:	e002      	b.n	8004b7a <_printf_i+0x1d2>
 8004b74:	0670      	lsls	r0, r6, #25
 8004b76:	d5fb      	bpl.n	8004b70 <_printf_i+0x1c8>
 8004b78:	8019      	strh	r1, [r3, #0]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	4615      	mov	r5, r2
 8004b80:	e7ba      	b.n	8004af8 <_printf_i+0x150>
 8004b82:	682b      	ldr	r3, [r5, #0]
 8004b84:	1d1a      	adds	r2, r3, #4
 8004b86:	602a      	str	r2, [r5, #0]
 8004b88:	681d      	ldr	r5, [r3, #0]
 8004b8a:	6862      	ldr	r2, [r4, #4]
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f7fb fb26 	bl	80001e0 <memchr>
 8004b94:	b108      	cbz	r0, 8004b9a <_printf_i+0x1f2>
 8004b96:	1b40      	subs	r0, r0, r5
 8004b98:	6060      	str	r0, [r4, #4]
 8004b9a:	6863      	ldr	r3, [r4, #4]
 8004b9c:	6123      	str	r3, [r4, #16]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba4:	e7a8      	b.n	8004af8 <_printf_i+0x150>
 8004ba6:	6923      	ldr	r3, [r4, #16]
 8004ba8:	462a      	mov	r2, r5
 8004baa:	4649      	mov	r1, r9
 8004bac:	4640      	mov	r0, r8
 8004bae:	47d0      	blx	sl
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d0ab      	beq.n	8004b0c <_printf_i+0x164>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	079b      	lsls	r3, r3, #30
 8004bb8:	d413      	bmi.n	8004be2 <_printf_i+0x23a>
 8004bba:	68e0      	ldr	r0, [r4, #12]
 8004bbc:	9b03      	ldr	r3, [sp, #12]
 8004bbe:	4298      	cmp	r0, r3
 8004bc0:	bfb8      	it	lt
 8004bc2:	4618      	movlt	r0, r3
 8004bc4:	e7a4      	b.n	8004b10 <_printf_i+0x168>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	4632      	mov	r2, r6
 8004bca:	4649      	mov	r1, r9
 8004bcc:	4640      	mov	r0, r8
 8004bce:	47d0      	blx	sl
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d09b      	beq.n	8004b0c <_printf_i+0x164>
 8004bd4:	3501      	adds	r5, #1
 8004bd6:	68e3      	ldr	r3, [r4, #12]
 8004bd8:	9903      	ldr	r1, [sp, #12]
 8004bda:	1a5b      	subs	r3, r3, r1
 8004bdc:	42ab      	cmp	r3, r5
 8004bde:	dcf2      	bgt.n	8004bc6 <_printf_i+0x21e>
 8004be0:	e7eb      	b.n	8004bba <_printf_i+0x212>
 8004be2:	2500      	movs	r5, #0
 8004be4:	f104 0619 	add.w	r6, r4, #25
 8004be8:	e7f5      	b.n	8004bd6 <_printf_i+0x22e>
 8004bea:	bf00      	nop
 8004bec:	080052ed 	.word	0x080052ed
 8004bf0:	080052fe 	.word	0x080052fe

08004bf4 <_read_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4d07      	ldr	r5, [pc, #28]	; (8004c14 <_read_r+0x20>)
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	4608      	mov	r0, r1
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	602a      	str	r2, [r5, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f7fe fd5f 	bl	80036c6 <_read>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_read_r+0x1e>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_read_r+0x1e>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	2000049c 	.word	0x2000049c

08004c18 <_fstat_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4d07      	ldr	r5, [pc, #28]	; (8004c38 <_fstat_r+0x20>)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	4604      	mov	r4, r0
 8004c20:	4608      	mov	r0, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	602b      	str	r3, [r5, #0]
 8004c26:	f7fe fe30 	bl	800388a <_fstat>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	d102      	bne.n	8004c34 <_fstat_r+0x1c>
 8004c2e:	682b      	ldr	r3, [r5, #0]
 8004c30:	b103      	cbz	r3, 8004c34 <_fstat_r+0x1c>
 8004c32:	6023      	str	r3, [r4, #0]
 8004c34:	bd38      	pop	{r3, r4, r5, pc}
 8004c36:	bf00      	nop
 8004c38:	2000049c 	.word	0x2000049c

08004c3c <_isatty_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4d06      	ldr	r5, [pc, #24]	; (8004c58 <_isatty_r+0x1c>)
 8004c40:	2300      	movs	r3, #0
 8004c42:	4604      	mov	r4, r0
 8004c44:	4608      	mov	r0, r1
 8004c46:	602b      	str	r3, [r5, #0]
 8004c48:	f7fe ff86 	bl	8003b58 <_isatty>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_isatty_r+0x1a>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_isatty_r+0x1a>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	2000049c 	.word	0x2000049c

08004c5c <memmove>:
 8004c5c:	4288      	cmp	r0, r1
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	eb01 0402 	add.w	r4, r1, r2
 8004c64:	d902      	bls.n	8004c6c <memmove+0x10>
 8004c66:	4284      	cmp	r4, r0
 8004c68:	4623      	mov	r3, r4
 8004c6a:	d807      	bhi.n	8004c7c <memmove+0x20>
 8004c6c:	1e43      	subs	r3, r0, #1
 8004c6e:	42a1      	cmp	r1, r4
 8004c70:	d008      	beq.n	8004c84 <memmove+0x28>
 8004c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c7a:	e7f8      	b.n	8004c6e <memmove+0x12>
 8004c7c:	4402      	add	r2, r0
 8004c7e:	4601      	mov	r1, r0
 8004c80:	428a      	cmp	r2, r1
 8004c82:	d100      	bne.n	8004c86 <memmove+0x2a>
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c8e:	e7f7      	b.n	8004c80 <memmove+0x24>

08004c90 <_realloc_r>:
 8004c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c94:	4680      	mov	r8, r0
 8004c96:	4614      	mov	r4, r2
 8004c98:	460e      	mov	r6, r1
 8004c9a:	b921      	cbnz	r1, 8004ca6 <_realloc_r+0x16>
 8004c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	f7ff b8cf 	b.w	8003e44 <_malloc_r>
 8004ca6:	b92a      	cbnz	r2, 8004cb4 <_realloc_r+0x24>
 8004ca8:	f7ff fc68 	bl	800457c <_free_r>
 8004cac:	4625      	mov	r5, r4
 8004cae:	4628      	mov	r0, r5
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	f000 f81b 	bl	8004cee <_malloc_usable_size_r>
 8004cb8:	4284      	cmp	r4, r0
 8004cba:	4607      	mov	r7, r0
 8004cbc:	d802      	bhi.n	8004cc4 <_realloc_r+0x34>
 8004cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cc2:	d812      	bhi.n	8004cea <_realloc_r+0x5a>
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff f8bc 	bl	8003e44 <_malloc_r>
 8004ccc:	4605      	mov	r5, r0
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d0ed      	beq.n	8004cae <_realloc_r+0x1e>
 8004cd2:	42bc      	cmp	r4, r7
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	bf28      	it	cs
 8004cda:	463a      	movcs	r2, r7
 8004cdc:	f7ff f87b 	bl	8003dd6 <memcpy>
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	f7ff fc4a 	bl	800457c <_free_r>
 8004ce8:	e7e1      	b.n	8004cae <_realloc_r+0x1e>
 8004cea:	4635      	mov	r5, r6
 8004cec:	e7df      	b.n	8004cae <_realloc_r+0x1e>

08004cee <_malloc_usable_size_r>:
 8004cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf2:	1f18      	subs	r0, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bfbc      	itt	lt
 8004cf8:	580b      	ldrlt	r3, [r1, r0]
 8004cfa:	18c0      	addlt	r0, r0, r3
 8004cfc:	4770      	bx	lr
	...

08004d00 <_init>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	bf00      	nop
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr

08004d0c <_fini>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	bf00      	nop
 8004d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d12:	bc08      	pop	{r3}
 8004d14:	469e      	mov	lr, r3
 8004d16:	4770      	bx	lr
